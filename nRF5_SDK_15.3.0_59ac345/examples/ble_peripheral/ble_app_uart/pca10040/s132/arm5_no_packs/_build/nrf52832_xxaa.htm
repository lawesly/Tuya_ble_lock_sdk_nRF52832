<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52832_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52832_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Mar 11 20:50:42 2020
<BR><P>
<H3>Maximum Stack Usage =       1416 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; idle_state_handle &rArr; tuya_ble_main_tasks_exec &rArr; tuya_sched_execute &rArr; tuya_ble_event_process &rArr; tuya_ble_handle_ble_cmd_evt &rArr; tuya_ble_evt_process &rArr; tuya_ble_handle_ble_factory_test_req &rArr; tuya_ble_app_production_test_process &rArr; app_port_factory_test_process &rArr; factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[1d]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[fe]">elog_output</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fe]">elog_output</a><BR>
 <LI><a href="#[1f5]">elog_strcpy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fe]">elog_output</a><BR>
 <LI><a href="#[1fc]">get_fmt_enabled</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fe]">elog_output</a><BR>
 <LI><a href="#[2f4]">std_n</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[107]">nrf_log_frontend_dequeue</a><BR>
 <LI><a href="#[73]">nrf_fstorage_sys_evt_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e0]">queue_process</a><BR>
 <LI><a href="#[7b]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[7a]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
 <LI><a href="#[1b8]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b8]">buffer_add</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">POWER_CLOCK_IRQHandler</a> from nrfx_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">RTC2_IRQHandler</a> from nrfx_rtc.o(i.RTC2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[1a]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[35]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[36]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[36]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[37]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[37]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[39]">alloc_env_cb</a> from ef_env.o(i.alloc_env_cb) referenced from ef_env.o(i.alloc_env)
 <LI><a href="#[3a]">app_common_evt_process</a> from app_common.o(i.app_common_evt_process) referenced from app_common.o(i.app_common_evt_send)
 <LI><a href="#[3b]">app_common_tuya_ble_sdk_callback</a> from app_common.o(i.app_common_tuya_ble_sdk_callback) referenced from app_common.o(i.app_common_init)
 <LI><a href="#[4f]">app_error_fault_handler</a> from main.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[3c]">app_ota_setting_write_complete_cb</a> from app_ota.o(i.app_ota_setting_write_complete_cb) referenced from app_ota.o(i.app_ota_end_handler)
 <LI><a href="#[49]">app_test_outtime_cb</a> from lock_timer.o(i.app_test_outtime_cb) referenced from lock_timer.o(i.lock_timer_creat)
 <LI><a href="#[4a]">app_test_reset_outtime_cb</a> from lock_timer.o(i.app_test_reset_outtime_cb) referenced from lock_timer.o(i.lock_timer_creat)
 <LI><a href="#[6a]">ble_evt_handler</a> from ble_conn_state.o(i.ble_evt_handler) referenced from ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[6d]">ble_evt_handler</a> from bsp_btn_ble.o(i.ble_evt_handler) referenced 2 times from bsp_btn_ble.o(sdh_ble_observers1)
 <LI><a href="#[6f]">ble_nus_on_ble_evt</a> from ble_nus.o(i.ble_nus_on_ble_evt) referenced from nrfs_svc.o(sdh_ble_observers2)
 <LI><a href="#[46]">bonding_conn_outtime_cb</a> from lock_timer.o(i.bonding_conn_outtime_cb) referenced from lock_timer.o(i.lock_timer_creat)
 <LI><a href="#[40]">check_and_recovery_env_cb</a> from ef_env.o(i.check_and_recovery_env_cb) referenced from ef_env.o(i.ef_load_env)
 <LI><a href="#[3f]">check_and_recovery_gc_cb</a> from ef_env.o(i.check_and_recovery_gc_cb) referenced from ef_env.o(i.ef_load_env)
 <LI><a href="#[3e]">check_sec_hdr_cb</a> from ef_env.o(i.check_sec_hdr_cb) referenced from ef_env.o(i.ef_load_env)
 <LI><a href="#[4b]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[48]">conn_monitor_outtime_cb</a> from lock_timer.o(i.conn_monitor_outtime_cb) referenced from lock_timer.o(i.lock_timer_creat)
 <LI><a href="#[44]">conn_param_update_outtime_cb</a> from lock_timer.o(i.conn_param_update_outtime_cb) referenced from lock_timer.o(i.lock_timer_creat)
 <LI><a href="#[45]">delay_report_outtime_cb</a> from lock_timer.o(i.delay_report_outtime_cb) referenced from lock_timer.o(i.lock_timer_creat)
 <LI><a href="#[3]">dfu_fstorage_evt_handler</a> from nrf_dfu_flash.o(i.dfu_fstorage_evt_handler) referenced 2 times from nrf_dfu_flash.o(fs_data)
 <LI><a href="#[43]">do_gc</a> from ef_env.o(i.do_gc) referenced from ef_env.o(i.gc_collect)
 <LI><a href="#[5b]">erase</a> from nrf_fstorage_sd.o(i.erase) referenced 2 times from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[41]">find_env_cb</a> from ef_env.o(i.find_env_cb) referenced from ef_env.o(i.find_env_no_cache)
 <LI><a href="#[2]">fstorage_evt_handler</a> from nrfs_flash.o(i.fstorage_evt_handler) referenced 2 times from nrfs_flash.o(fs_data)
 <LI><a href="#[50]">gatt_evt_handler</a> from nrfs_ble.o(i.gatt_evt_handler) referenced from nrfs_ble.o(i.nrfs_gatt_init)
 <LI><a href="#[42]">gc_check_cb</a> from ef_env.o(i.gc_check_cb) referenced from ef_env.o(i.gc_collect)
 <LI><a href="#[57]">init</a> from nrf_fstorage_sd.o(i.init) referenced 2 times from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[5e]">is_busy</a> from nrf_fstorage_sd.o(i.is_busy) referenced 2 times from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[33]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1]">memset</a> from memseta.o(.text) referenced 2 times from platform_util.o(.data)
 <LI><a href="#[6c]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from nrfs_ble.o(sdh_ble_observers1)
 <LI><a href="#[6b]">nrf_ble_scan_on_ble_evt</a> from nrf_ble_scan.o(i.nrf_ble_scan_on_ble_evt) referenced from nrfs_scan_adv.o(sdh_ble_observers1)
 <LI><a href="#[71]">nrf_fstorage_sdh_req_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler) referenced from nrf_fstorage_sd.o(sdh_req_observers0)
 <LI><a href="#[77]">nrf_fstorage_sdh_state_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler) referenced from nrf_fstorage_sd.o(sdh_state_observers0)
 <LI><a href="#[73]">nrf_fstorage_sys_evt_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler) referenced from nrf_fstorage_sd.o(sdh_soc_observers0)
 <LI><a href="#[69]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[68]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[67]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[74]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[75]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[70]">nrfs_ble_evt_handler</a> from nrfs_ble.o(i.nrfs_ble_evt_handler) referenced from nrfs_ble.o(sdh_ble_observers3)
 <LI><a href="#[55]">nrfx_uart_0_irq_handler</a> from nrfx_uart.o(i.nrfx_uart_0_irq_handler) referenced from nrfx_uart.o(.constdata)
 <LI><a href="#[56]">nrfx_uarte_0_irq_handler</a> from nrfx_uarte.o(i.nrfx_uarte_0_irq_handler) referenced from nrfx_uarte.o(.constdata)
 <LI><a href="#[52]">nus_data_handler</a> from nrfs_svc.o(i.nus_data_handler) referenced from nrfs_svc.o(i.nrfs_svc_init)
 <LI><a href="#[59]">read</a> from nrf_fstorage_sd.o(i.read) referenced 2 times from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[47]">reset_with_disconn_outtime_cb</a> from lock_timer.o(i.reset_with_disconn_outtime_cb) referenced from lock_timer.o(i.lock_timer_creat)
 <LI><a href="#[5c]">rmap</a> from nrf_fstorage_sd.o(i.rmap) referenced 2 times from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[54]">rtc2_handler</a> from nrfs_timer.o(i.rtc2_handler) referenced from nrfs_timer.o(i.rtc2_config)
 <LI><a href="#[51]">scan_evt_handler</a> from nrfs_scan_adv.o(i.scan_evt_handler) referenced from nrfs_scan_adv.o(i.nrfs_scan_init)
 <LI><a href="#[76]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[38]">sector_statistics_cb</a> from ef_env.o(i.sector_statistics_cb) referenced from ef_env.o(i.alloc_env)
 <LI><a href="#[4e]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[72]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[53]">uart_event_handle</a> from nrfs_uart.o(i.uart_event_handle) referenced from nrfs_uart.o(i.nrfs_uart_init)
 <LI><a href="#[3d]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[4d]">uart_evt_handler</a> from nrf_drv_uart.o(i.uart_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[4c]">uarte_evt_handler</a> from nrf_drv_uart.o(i.uarte_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[58]">uninit</a> from nrf_fstorage_sd.o(i.uninit) referenced 2 times from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[5d]">wmap</a> from nrf_fstorage_sd.o(i.wmap) referenced 2 times from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[5a]">write</a> from nrf_fstorage_sd.o(i.write) referenced 2 times from nrf_fstorage_sd.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[3c2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[78]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[93]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3c3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3c4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3c5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3c6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3c7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[29c]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[7a]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>

<P><STRONG><a name="[29f]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[7b]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>

<P><STRONG><a name="[29b]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
</UL>

<P><STRONG><a name="[2a7]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_store
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[2a6]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>

<P><STRONG><a name="[2a5]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[3c8]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a4]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[2a9]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[3c9]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[3ca]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_start
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_unix_time_char_ms_resp
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3cb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[36d]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_rand_generator
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[3cc]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_with_data
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_sync_handler
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save_in_local_flash
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_write_auth_info_handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_rsp
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_query_info_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_info_handler
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_rsp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_save
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_offline_evt_report
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_modify_in_local_flash
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_modify_all_by_memberid
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_rand_generator
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_advertising_scan_rsp_data_update
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_advertising_adv_data_update
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_load_settings
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sdk_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_ota_response
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_with_time_report
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_report
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update_ret
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_receive_data
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gatt_receive_data
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_params_set
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_forbidden_parts_copy_from_backup
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_unix_time_char_ms_resp
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_pair_req
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ota_req
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_net_config_info_req
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_write_req
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_query_req
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dev_infor_req
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_passthrough_data_req
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_data_unpack
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_adv_change
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_klvlist
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sched_event_put
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_key_generate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_generate_key1
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_id_key_generate
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_Add_Pkcs
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_sched_execute
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_with_time_reported_evt
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_device_info_update_evt
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_encryption
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_decryption
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trsmitr_send_pkg_encode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trsmitr_recv_pkg_decode
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_load_settings
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_sys_settings
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_auth_settings
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_uart_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_send
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_adv_change
</UL>

<P><STRONG><a name="[3cd]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_status
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
</UL>

<P><STRONG><a name="[3ce]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_sync_new_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_info_handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_enter
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish_ret
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_receive_data
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_net_config_info_req
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_data_unpack
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_key_generate
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_id_key_generate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_write_auth_info_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_info_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_exit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_end_handler
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_default
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_load_settings
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish_ret
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_timeout
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_req_report
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_connected_evt
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_adv_report
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_connect_with_target
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcs_internal_state_reset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_device_reset_req
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_data_unpack
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_with_time_reported_evt
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trsmitr_init
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[3d0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_util.o(.data)
</UL>
<P><STRONG><a name="[1f1]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_hexdump
</UL>

<P><STRONG><a name="[1f4]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_hexdump
</UL>

<P><STRONG><a name="[167]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_write_auth_info_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_dynamic_pwd_token
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_string
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_cb
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
</UL>

<P><STRONG><a name="[11f]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_nopwd_remote_handler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_query_info_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_offset_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_info_handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_uuid_find
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_pair_req
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_key_generate
</UL>

<P><STRONG><a name="[c3]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[215]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_cb
</UL>

<P><STRONG><a name="[81]"></a>atoll</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_unix_time_char_ms_resp
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_evt_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOTP
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_evt_handler
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOTP
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_evt_handler
</UL>

<P><STRONG><a name="[3d1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3d2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__strtoll</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, __strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoll
</UL>

<P><STRONG><a name="[3d3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[85]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[d3]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3d4]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[79]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3d5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3d6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>_strtoull</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>

<P><STRONG><a name="[95]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[94]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
</UL>

<P><STRONG><a name="[3d7]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[14]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 528 bytes, Stack size 72 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>HMAC_SHA1</STRONG> (Thumb, 180 bytes, Stack size 280 bytes, hmac-sha1.o(i.HMAC_SHA1))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = HMAC_SHA1 &rArr; SHA1 &rArr; SHA1Result &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Result
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Input
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOTP
</UL>

<P><STRONG><a name="[e]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, nrfx_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RTC2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_rtc.o(i.RTC2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC2_IRQHandler &rArr; irq_handler &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>

<P><STRONG><a name="[ac]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[9f]"></a>SHA1</STRONG> (Thumb, 64 bytes, Stack size 124 bytes, sha1.o(i.SHA1))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = SHA1 &rArr; SHA1Result &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Result
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Input
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
</UL>

<P><STRONG><a name="[a3]"></a>SHA1Input</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sha1.o(i.SHA1Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SHA1Input &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1
</UL>

<P><STRONG><a name="[b1]"></a>SHA1PadMessage</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, sha1.o(i.SHA1PadMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Result
</UL>

<P><STRONG><a name="[b0]"></a>SHA1ProcessMessageBlock</STRONG> (Thumb, 580 bytes, Stack size 368 bytes, sha1.o(i.SHA1ProcessMessageBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SHA1ProcessMessageBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1PadMessage
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Input
</UL>

<P><STRONG><a name="[a2]"></a>SHA1Reset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sha1.o(i.SHA1Reset))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1
</UL>

<P><STRONG><a name="[a4]"></a>SHA1Result</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sha1.o(i.SHA1Result))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SHA1Result &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1PadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1
</UL>

<P><STRONG><a name="[22]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 596 bytes, Stack size 8 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_66
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_57
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_37
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_36
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_32
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_31
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_182
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_16
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_136
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_12
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_108
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTE0_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3d9]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1f3]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_string
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_hexdump
</UL>

<P><STRONG><a name="[3da]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[3db]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[c6]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3dc]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[16b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_load
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_delete_and_default
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_save
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_load
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_delete
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_save
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_load
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete
</UL>

<P><STRONG><a name="[3dd]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3de]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[c7]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3df]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[3e0]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[3e1]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[200]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[c8]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3e2]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[3e3]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[3e4]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1ed]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>

<P><STRONG><a name="[d4]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoll
</UL>

<P><STRONG><a name="[3e5]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[c2]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOTP
</UL>

<P><STRONG><a name="[d1]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[cb]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c9]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[cf]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[cc]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[d0]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3e6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3e7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3e8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ca]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[f3]"></a>app_common_evt_send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_common.o(i.app_common_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_common_evt_send &rArr; app_port_ble_custom_event_send &rArr; tuya_ble_custom_event_send &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ble_custom_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_with_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_only_evt
</UL>

<P><STRONG><a name="[f5]"></a>app_common_evt_send_only_evt</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_common.o(i.app_common_evt_send_only_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_common_evt_send_only_evt &rArr; app_port_malloc &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_malloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_creat_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_with_disconn_outtime_cb
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_report_outtime_cb
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_param_update_outtime_cb
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_monitor_outtime_cb
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bonding_conn_outtime_cb
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_reset_outtime_cb
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_outtime_cb
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_evt_handler
</UL>

<P><STRONG><a name="[f7]"></a>app_common_evt_send_with_data</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_common.o(i.app_common_evt_send_with_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_common_evt_send_with_data &rArr; app_port_malloc &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_malloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_creat_handler
</UL>

<P><STRONG><a name="[f8]"></a>app_common_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_common.o(i.app_common_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = app_common_init &rArr; lock_flash_init &rArr; lock_settings_default &rArr; lock_settings_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ble_sdk_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ble_callback_queue_register
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_common_init
</UL>

<P><STRONG><a name="[4f]"></a>app_error_fault_handler</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, main.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[108]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ble_conn_evt_ext
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_bt_mac_addr
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_uart_send
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_stop
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_start
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_create
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_svc_send_data
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_update_advDataAndScanRsp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_set_bt_mac_addr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_conn_param_update
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc2_config
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_uart_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_svc_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_set_conn_param
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_gatt_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_gap_params_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_stack_init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_set_defConn_param
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_evt_handler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_scan_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_stop
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_start
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_evt_handler
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_management_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
</UL>

<P><STRONG><a name="[109]"></a>app_fifo_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[17d]"></a>app_fifo_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[10c]"></a>app_fifo_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[e9]"></a>app_ota_disconn_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_ota.o(i.app_ota_disconn_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = app_ota_disconn_handler &rArr; app_ota_exit &rArr; lock_timer_start &rArr; app_port_timer_start &rArr; tuya_ble_timer_start &rArr; nrfs_timer_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[104]"></a>app_ota_handler</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, app_ota.o(i.app_ota_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = app_ota_handler &rArr; app_ota_file_offset_handler &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_req_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_offset_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_info_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_end_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_data_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_tuya_ble_sdk_callback
</UL>

<P><STRONG><a name="[fd]"></a>app_ota_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_ota.o(i.app_ota_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = app_ota_init &rArr; app_port_dfu_settings_init &rArr; nrf_dfu_settings_init &rArr; nrf_dfu_settings_write_and_backup &rArr; settings_backup &rArr; settings_write &rArr; nrf_dfu_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dfu_settings_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_init
</UL>

<P><STRONG><a name="[fb]"></a>app_port_ble_callback_queue_register</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_port.o(i.app_port_ble_callback_queue_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_port_ble_callback_queue_register &rArr; tuya_ble_callback_queue_register &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_callback_queue_register
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_init
</UL>

<P><STRONG><a name="[11d]"></a>app_port_ble_conn_evt_ext</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, app_port.o(i.app_port_ble_conn_evt_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_port_ble_conn_evt_ext &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_enter
</UL>

<P><STRONG><a name="[f4]"></a>app_port_ble_custom_event_send</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, app_port.o(i.app_port_ble_custom_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_port_ble_custom_event_send &rArr; tuya_ble_custom_event_send &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_custom_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send
</UL>

<P><STRONG><a name="[129]"></a>app_port_ble_gap_disconnect</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_port.o(i.app_port_ble_gap_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_port_ble_gap_disconnect &rArr; tuya_ble_gap_disconnect &rArr; nrfs_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_with_disconn_outtime_cb_handler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_monitor_outtime_cb_handler
</UL>

<P><STRONG><a name="[fa]"></a>app_port_ble_sdk_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_port.o(i.app_port_ble_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = app_port_ble_sdk_init &rArr; tuya_ble_sdk_init &rArr; tuya_ble_adv_change &rArr; tuya_ble_device_id_encrypt &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sdk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_init
</UL>

<P><STRONG><a name="[12c]"></a>app_port_check_sum</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_port.o(i.app_port_check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_port_check_sum &rArr; cpt_check_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpt_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_rsp
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_rsp
</UL>

<P><STRONG><a name="[11c]"></a>app_port_conn_param_update</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_port.o(i.app_port_conn_param_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = app_port_conn_param_update &rArr; nrfs_conn_param_update &rArr; nrfs_set_conn_param &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_conn_param_update
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_enter
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_param_update_outtime_cb_handler
</UL>

<P><STRONG><a name="[112]"></a>app_port_crc16_compute</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_port.o(i.app_port_crc16_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_port_crc16_compute &rArr; cpt_crc16_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpt_crc16_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_sync_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_data_handler
</UL>

<P><STRONG><a name="[115]"></a>app_port_crc32_compute</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_port.o(i.app_port_crc32_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_port_crc32_compute &rArr; cpt_crc32_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpt_crc32_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_get_crc32_in_flash
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_data_handler
</UL>

<P><STRONG><a name="[131]"></a>app_port_device_reset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_port.o(i.app_port_device_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = app_port_device_reset &rArr; tuya_ble_device_reset &rArr; nrfs_system_reset &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_with_disconn_outtime_cb_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_reset_outtime_cb_handler
</UL>

<P><STRONG><a name="[125]"></a>app_port_dfu_settings_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_port.o(i.app_port_dfu_settings_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = app_port_dfu_settings_init &rArr; nrf_dfu_settings_init &rArr; nrf_dfu_settings_write_and_backup &rArr; settings_backup &rArr; settings_write &rArr; nrf_dfu_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_init
</UL>

<P><STRONG><a name="[11a]"></a>app_port_dfu_settings_write_and_backup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_port.o(i.app_port_dfu_settings_write_and_backup))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = app_port_dfu_settings_write_and_backup &rArr; nrf_dfu_settings_write_and_backup &rArr; settings_backup &rArr; settings_write &rArr; nrf_dfu_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_write_and_backup
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_exit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_end_handler
</UL>

<P><STRONG><a name="[135]"></a>app_port_dp_data_report</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_port.o(i.app_port_dp_data_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = app_port_dp_data_report &rArr; tuya_ble_dp_data_report &rArr; data_2_klvlist &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_connect_status
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_report
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_state_sync_report
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_creat_sub_report
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_meth_sync_new_report
</UL>

<P><STRONG><a name="[138]"></a>app_port_dp_data_with_time_report</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, app_port.o(i.app_port_dp_data_with_time_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = app_port_dp_data_with_time_report &rArr; tuya_ble_dp_data_with_time_report &rArr; data_2_klvlist &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_connect_status
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_with_time_report
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_record_report
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_record_combine_report
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_alarm_record_report
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_offline_evt_report
</UL>

<P><STRONG><a name="[13a]"></a>app_port_factory_test_process</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_port.o(i.app_port_factory_test_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = app_port_factory_test_process &rArr; factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_process
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_app_production_test_process
</UL>

<P><STRONG><a name="[f2]"></a>app_port_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_port.o(i.app_port_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_port_free &rArr; tuya_ble_free &rArr; vTuyaPortFree &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[13d]"></a>app_port_get_bt_mac_addr</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_port.o(i.app_port_get_bt_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_port_get_bt_mac_addr &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
</UL>

<P><STRONG><a name="[136]"></a>app_port_get_connect_status</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_port.o(i.app_port_get_connect_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_port_get_connect_status
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_with_time_report
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_report
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_save
</UL>

<P><STRONG><a name="[13f]"></a>app_port_get_old_timestamp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_port.o(i.app_port_get_old_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_port_get_old_timestamp &rArr; nrfs_get_old_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_get_old_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_offline_evt_report
</UL>

<P><STRONG><a name="[141]"></a>app_port_get_timestamp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_port.o(i.app_port_get_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_port_get_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_get_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_nopwd_remote_handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_record_report
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_record_combine_report
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dynamic_pwd_verify
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_alarm_record_report
</UL>

<P><STRONG><a name="[118]"></a>app_port_kv_del</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_port.o(i.app_port_kv_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = app_port_kv_del &rArr; ef_del_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_erease_all
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_end_handler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_delete_and_default
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_delete
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete
</UL>

<P><STRONG><a name="[120]"></a>app_port_kv_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_port.o(i.app_port_kv_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_nopwd_remote_handler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_query_info_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_offset_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_info_handler
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_load
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evtid_load
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_load
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_load
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_init_bt_mac_addr
</UL>

<P><STRONG><a name="[145]"></a>app_port_kv_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_port.o(i.app_port_kv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = app_port_kv_init &rArr; easyflash_init &rArr; ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_common_init
</UL>

<P><STRONG><a name="[116]"></a>app_port_kv_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_port.o(i.app_port_kv_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_nopwd_remote_setkey_handler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_nopwd_remote_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_write_auth_info_handler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_query_info_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_offset_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_data_handler
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evtid_save
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_save
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_save
</UL>

<P><STRONG><a name="[149]"></a>app_port_local_clock_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_port.o(i.app_port_local_clock_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = app_port_local_clock_start &rArr; nrfs_local_timer_start &rArr; rtc2_start &rArr; rtc2_config &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_local_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_common_init
</UL>

<P><STRONG><a name="[f6]"></a>app_port_malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_port.o(i.app_port_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_port_malloc &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_with_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_only_evt
</UL>

<P><STRONG><a name="[113]"></a>app_port_nv_erase</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_port.o(i.app_port_nv_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = app_port_nv_erase &rArr; tuya_ble_nv_erase &rArr; nrfs_flash_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_data_handler
</UL>

<P><STRONG><a name="[114]"></a>app_port_nv_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_port.o(i.app_port_nv_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = app_port_nv_write &rArr; tuya_ble_nv_write &rArr; nrfs_flash_write &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_data_handler
</UL>

<P><STRONG><a name="[126]"></a>app_port_ota_rsp</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, app_port.o(i.app_port_ota_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = app_port_ota_rsp &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_ota_response
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_rsp
</UL>

<P><STRONG><a name="[111]"></a>app_port_reverse_byte</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_port.o(i.app_port_reverse_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = app_port_reverse_byte &rArr; cpt_reverse_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpt_reverse_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_req_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_offset_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_info_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_data_handler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_process
</UL>

<P><STRONG><a name="[150]"></a>app_port_set_bt_mac_addr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_port.o(i.app_port_set_bt_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = app_port_set_bt_mac_addr &rArr; nrfs_set_bt_mac_addr &rArr; nrfs_adv_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_set_bt_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_write_auth_info_handler
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_init_bt_mac_addr
</UL>

<P><STRONG><a name="[152]"></a>app_port_string_op_hex2hexstr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_port.o(i.app_port_string_op_hex2hexstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_port_string_op_hex2hexstr &rArr; ty_string_op_hex2hexstr
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_string_op_hex2hexstr
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
</UL>

<P><STRONG><a name="[154]"></a>app_port_string_op_hexstr2hex</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_port.o(i.app_port_string_op_hexstr2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_port_string_op_hexstr2hex &rArr; ty_string_op_hexstr2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_string_op_hexstr2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_write_auth_info_handler
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_init_bt_mac_addr
</UL>

<P><STRONG><a name="[156]"></a>app_port_timer_create</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_port.o(i.app_port_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = app_port_timer_create &rArr; tuya_ble_timer_create &rArr; nrfs_timer_create &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_creat
</UL>

<P><STRONG><a name="[158]"></a>app_port_timer_start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_port.o(i.app_port_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = app_port_timer_start &rArr; tuya_ble_timer_start &rArr; nrfs_timer_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_start
</UL>

<P><STRONG><a name="[15a]"></a>app_port_timer_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_port.o(i.app_port_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = app_port_timer_stop &rArr; tuya_ble_timer_stop &rArr; nrfs_timer_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_stop
</UL>

<P><STRONG><a name="[15c]"></a>app_port_tuya_ble_device_factory_reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_port.o(i.app_port_tuya_ble_device_factory_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_port_tuya_ble_device_factory_reset &rArr; tuya_ble_device_factory_reset &rArr; tuya_ble_event_send &rArr; tuya_ble_message_send &rArr; tuya_ble_sched_event_put
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_factory_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_factory_handler
</UL>

<P><STRONG><a name="[15e]"></a>app_port_uart_send_data</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_port.o(i.app_port_uart_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = app_port_uart_send_data &rArr; tuya_ble_uart_send_data &rArr; nrfs_uart_send &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_rsp
</UL>

<P><STRONG><a name="[102]"></a>app_port_update_timestamp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_port.o(i.app_port_update_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_port_update_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_update_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_tuya_ble_sdk_callback
</UL>

<P><STRONG><a name="[fc]"></a>app_test_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_test.o(i.app_test_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = app_test_init &rArr; lock_timer_start &rArr; app_port_timer_start &rArr; tuya_ble_timer_start &rArr; nrfs_timer_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_init
</UL>

<P><STRONG><a name="[f0]"></a>app_test_outtime_cb_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lock_timer.o(i.app_test_outtime_cb_handler))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[162]"></a>app_test_pre_process</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_test.o(i.app_test_pre_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = app_test_pre_process &rArr; app_test_process &rArr; app_test_write_auth_info_handler &rArr; lock_factory_handler &rArr; lock_flash_erease_all &rArr; lock_settings_delete_and_default &rArr; lock_settings_default &rArr; lock_settings_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_test_mode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_process
</UL>

<P><STRONG><a name="[f1]"></a>app_test_reset_outtime_cb_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lock_timer.o(i.app_test_reset_outtime_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_test_reset_outtime_cb_handler &rArr; app_port_device_reset &rArr; tuya_ble_device_reset &rArr; nrfs_system_reset &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_device_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[322]"></a>app_timer_create</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_create
</UL>

<P><STRONG><a name="[16f]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_init &rArr; rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_create
</UL>

<P><STRONG><a name="[176]"></a>app_timer_start</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_start
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[178]"></a>app_timer_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_stop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[17a]"></a>app_uart_get</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, app_uart_fifo.o(i.app_uart_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_uart_get &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
</UL>

<P><STRONG><a name="[17c]"></a>app_uart_init</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_uart_init
</UL>

<P><STRONG><a name="[17f]"></a>app_uart_put</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_uart_send
</UL>

<P><STRONG><a name="[183]"></a>app_util_critical_region_enter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_enter_critical
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_lock
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[185]"></a>app_util_critical_region_exit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_exit_critical
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_unlock
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[196]"></a>bcs_internal_state_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_conn_state.o(i.bcs_internal_state_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bcs_internal_state_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_init
</UL>

<P><STRONG><a name="[197]"></a>blcm_link_ctx_get</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ble_link_ctx_manager.o(i.blcm_link_ctx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[199]"></a>ble_advdata_search</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ble_advdata.o(i.ble_advdata_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_uuid_find
</UL>

<P><STRONG><a name="[da]"></a>ble_advdata_uuid_find</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, ble_advdata.o(i.ble_advdata_uuid_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_advdata_uuid_find &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_uuid_compare
</UL>

<P><STRONG><a name="[198]"></a>ble_conn_state_conn_idx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>

<P><STRONG><a name="[19d]"></a>ble_conn_state_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_init &rArr; bcs_internal_state_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcs_internal_state_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>ble_conn_state_valid</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>

<P><STRONG><a name="[1ad]"></a>ble_nus_data_send</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ble_nus.o(i.ble_nus_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_svc_send_data
</UL>

<P><STRONG><a name="[1ae]"></a>ble_nus_init</STRONG> (Thumb, 268 bytes, Stack size 72 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_nus_init &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_svc_init
</UL>

<P><STRONG><a name="[6f]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_nus_on_ble_evt &rArr; on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfs_svc.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[1b3]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[ed]"></a>bonding_conn_outtime_cb_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lock_timer.o(i.bonding_conn_outtime_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = bonding_conn_outtime_cb_handler &rArr; lock_offline_evt_report &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_offline_evt_report
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[dc]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>

<P><STRONG><a name="[2f1]"></a>buffer_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[1af]"></a>characteristic_add</STRONG> (Thumb, 456 bytes, Stack size 80 bytes, ble_srv_common.o(i.characteristic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[39f]"></a>check_sum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tuya_ble_utils.o(i.check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_factory_test_req
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_uart_cmd_evt
</UL>

<P><STRONG><a name="[1c8]"></a>conn_handle_list_get</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, ble_conn_state.o(i.conn_handle_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[ef]"></a>conn_monitor_outtime_cb_handler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lock_timer.o(i.conn_monitor_outtime_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = conn_monitor_outtime_cb_handler &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_get
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ble_gap_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[eb]"></a>conn_param_update_outtime_cb_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lock_timer.o(i.conn_param_update_outtime_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = conn_param_update_outtime_cb_handler &rArr; app_port_conn_param_update &rArr; nrfs_conn_param_update &rArr; nrfs_set_conn_param &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_conn_param_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[12d]"></a>cpt_check_sum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cpt_math.o(i.cpt_check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cpt_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_check_sum
</UL>

<P><STRONG><a name="[12f]"></a>cpt_crc16_compute</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cpt_math.o(i.cpt_crc16_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cpt_crc16_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_crc16_compute
</UL>

<P><STRONG><a name="[130]"></a>cpt_crc32_compute</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, cpt_math.o(i.cpt_crc32_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpt_crc32_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_crc32_compute
</UL>

<P><STRONG><a name="[14f]"></a>cpt_reverse_byte</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, cpt_math.o(i.cpt_reverse_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cpt_reverse_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_reverse_byte
</UL>

<P><STRONG><a name="[352]"></a>crc32_compute</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, crc32.o(i.crc32_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc32_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_crc_get
</UL>

<P><STRONG><a name="[1d6]"></a>data_2_klvlist</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, tuya_ble_mutli_tsf_protocol.o(i.data_2_klvlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = data_2_klvlist &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_klv_list
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_with_time_report
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_report
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_write_req
</UL>

<P><STRONG><a name="[ec]"></a>delay_report_outtime_cb_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lock_timer.o(i.delay_report_outtime_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = delay_report_outtime_cb_handler &rArr; delay_report_outtime_handler &rArr; lock_open_record_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_report_outtime_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[1de]"></a>delay_report_outtime_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lock_dp_report.o(i.delay_report_outtime_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = delay_report_outtime_handler &rArr; lock_open_record_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_record_report
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_creat_sub_report
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_report_outtime_cb_handler
</UL>

<P><STRONG><a name="[3]"></a>dfu_fstorage_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_dfu_flash.o(i.dfu_fstorage_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfu_fstorage_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_dfu_flash.o(fs_data)
</UL>
<P><STRONG><a name="[147]"></a>easyflash_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, easyflash.o(i.easyflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = easyflash_init &rArr; ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_init
</UL>

<P><STRONG><a name="[1d2]"></a>ef_calc_crc32</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ef_utils.o(i.ef_calc_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ef_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[143]"></a>ef_del_env</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ef_env.o(i.ef_del_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = ef_del_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_del
</UL>

<P><STRONG><a name="[1e6]"></a>ef_env_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ef_env.o(i.ef_env_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
</UL>

<P><STRONG><a name="[1ea]"></a>ef_env_set_default</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, ef_env.o(i.ef_env_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
</UL>

<P><STRONG><a name="[144]"></a>ef_get_env_blob</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ef_env.o(i.ef_get_env_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_get
</UL>

<P><STRONG><a name="[1e9]"></a>ef_load_env</STRONG> (Thumb, 118 bytes, Stack size 104 bytes, ef_env.o(i.ef_load_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_init
</UL>

<P><STRONG><a name="[e1]"></a>ef_log_debug</STRONG> (Thumb, 60 bytes, Stack size 144 bytes, ef_port.o(i.ef_log_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_erase
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_status
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_init
</UL>

<P><STRONG><a name="[1bb]"></a>ef_log_info</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ef_port.o(i.ef_log_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
</UL>

<P><STRONG><a name="[1e7]"></a>ef_port_env_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ef_port.o(i.ef_port_env_lock))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
</UL>

<P><STRONG><a name="[1e8]"></a>ef_port_env_unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ef_port.o(i.ef_port_env_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
</UL>

<P><STRONG><a name="[1ee]"></a>ef_port_erase</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ef_port.o(i.ef_port_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ef_port_erase &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_erase
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[1e5]"></a>ef_port_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ef_port.o(i.ef_port_init))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
</UL>

<P><STRONG><a name="[1cc]"></a>ef_port_read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ef_port.o(i.ef_port_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ef_port_read &rArr; tuya_ble_nv_read &rArr; nrfs_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_status
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_env_addr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continue_ff_addr
</UL>

<P><STRONG><a name="[de]"></a>ef_port_write</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ef_port.o(i.ef_port_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_env_hdr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
</UL>

<P><STRONG><a name="[148]"></a>ef_set_env_blob</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ef_env.o(i.ef_set_env_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_set
</UL>

<P><STRONG><a name="[1f0]"></a>elog_hexdump</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, elog.o(i.elog_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = elog_hexdump &rArr; elog_port_output &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_strcpy
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_unlock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump
</UL>

<P><STRONG><a name="[1f8]"></a>elog_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, elog.o(i.elog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = elog_init &rArr; elog_set_filter_lvl &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_filter_lvl
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_lock_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_init
</UL>

<P><STRONG><a name="[fe]"></a>elog_output</STRONG> (Thumb, 744 bytes, Stack size 88 bytes, elog.o(i.elog_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_strcpy
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_get_time
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_get_t_info
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_get_p_info
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_unlock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_lock
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fmt_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_pw_modify_handler
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_pw_delete_handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_pw_creat_handler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_nopwd_remote_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_modify_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_delete_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_creat_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_with_time_report
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_remote_anti_lock
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_with_nopwd_remote
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_with_bt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_mode_enter
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ota_rsp
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_req_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_offset_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_info_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_end_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_data_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_tuya_ble_sdk_callback
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_mode_exit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_mode_enter
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_dynamic_pwd_token
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_string
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_device_reset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_monitor_outtime_cb_handler
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_start
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_create
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_svc_send_data
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_erase
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_evt_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_evt_handler
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_stop
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_start
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_evt_handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_strcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_start
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_output_enabled
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_fmt
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_filter_lvl
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fmt_enabled
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstorage_evt_handler
</UL>

<P><STRONG><a name="[1f2]"></a>elog_output_lock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, elog.o(i.elog_output_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = elog_output_lock &rArr; elog_port_output_lock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_hexdump
</UL>

<P><STRONG><a name="[1fa]"></a>elog_output_lock_enabled</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, elog.o(i.elog_output_lock_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = elog_output_lock_enabled &rArr; elog_port_output_lock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_unlock
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
</UL>

<P><STRONG><a name="[1f7]"></a>elog_output_unlock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, elog.o(i.elog_output_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = elog_output_unlock &rArr; elog_port_output_unlock &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_hexdump
</UL>

<P><STRONG><a name="[1fe]"></a>elog_port_get_p_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, elog_port.o(i.elog_port_get_p_info))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[1ff]"></a>elog_port_get_t_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, elog_port.o(i.elog_port_get_t_info))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[1fd]"></a>elog_port_get_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, elog_port.o(i.elog_port_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[1f9]"></a>elog_port_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, elog_port.o(i.elog_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = elog_port_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
</UL>

<P><STRONG><a name="[1f6]"></a>elog_port_output</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, elog_port.o(i.elog_port_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = elog_port_output &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_hexdump
</UL>

<P><STRONG><a name="[201]"></a>elog_port_output_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, elog_port.o(i.elog_port_output_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = elog_port_output_lock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_lock_enabled
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_lock
</UL>

<P><STRONG><a name="[202]"></a>elog_port_output_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, elog_port.o(i.elog_port_output_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = elog_port_output_unlock &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_unlock
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output_lock_enabled
</UL>

<P><STRONG><a name="[1fb]"></a>elog_set_filter_lvl</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, elog.o(i.elog_set_filter_lvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = elog_set_filter_lvl &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
</UL>

<P><STRONG><a name="[203]"></a>elog_set_fmt</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, elog.o(i.elog_set_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = elog_set_fmt &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_init
</UL>

<P><STRONG><a name="[204]"></a>elog_set_output_enabled</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, elog.o(i.elog_set_output_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = elog_set_output_enabled &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_start
</UL>

<P><STRONG><a name="[205]"></a>elog_start</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, elog.o(i.elog_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = elog_start &rArr; elog_set_output_enabled &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_output_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_init
</UL>

<P><STRONG><a name="[1f5]"></a>elog_strcpy</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, elog_utils.o(i.elog_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = elog_strcpy &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_hexdump
</UL>

<P><STRONG><a name="[ce]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[13b]"></a>factory_test_process</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, app_test.o(i.factory_test_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_reverse_byte
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_pre_process
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_factory_test_process
</UL>

<P><STRONG><a name="[1d7]"></a>free_klv_list</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tuya_ble_mutli_tsf_protocol.o(i.free_klv_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = free_klv_list &rArr; tuya_ble_free &rArr; vTuyaPortFree &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_with_time_report
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_report
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_write_req
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_klvlist
</UL>

<P><STRONG><a name="[39c]"></a>get_m_conn_handle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfs_ble.o(i.get_m_conn_handle))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gatt_send_data
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_disconnect
</UL>

<P><STRONG><a name="[1a2]"></a>get_trsmitr_subpkg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tuya_ble_mutli_tsf_protocol.o(i.get_trsmitr_subpkg))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_data_unpack
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[1a1]"></a>get_trsmitr_subpkg_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tuya_ble_mutli_tsf_protocol.o(i.get_trsmitr_subpkg_len))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_data_unpack
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[2bc]"></a>is_whitelist_used</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_ble_scan.o(i.is_whitelist_used))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_adv_report
</UL>

<P><STRONG><a name="[238]"></a>lock_alarm_record_report</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lock_dp_report.o(i.lock_alarm_record_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = lock_alarm_record_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_timestamp
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_with_time_report
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
</UL>

<P><STRONG><a name="[23a]"></a>lock_common_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lock_common.o(i.lock_common_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = lock_common_init &rArr; app_port_kv_init &rArr; easyflash_init &rArr; ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_creat
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_local_clock_start
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>lock_dp_parser_handler</STRONG> (Thumb, 1970 bytes, Stack size 24 bytes, lock_dp_parser.o(i.lock_dp_parser_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = lock_dp_parser_handler &rArr; open_meth_modify_handler &rArr; lock_hard_modify_all_by_memberid &rArr; lock_hardid_load_by_memberid &rArr; lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_freeze_or_unfreeze_handler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_pw_modify_handler
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_pw_delete_handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_pw_creat_handler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_nopwd_remote_setkey_handler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_nopwd_remote_handler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_bt_handler
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_sync_new_handler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_sync_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_modify_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_freeze_or_unfreeze_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_delete_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_creat_handler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_report
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_remote_anti_lock
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_save
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_tuya_ble_sdk_callback
</UL>

<P><STRONG><a name="[24b]"></a>lock_dynamic_pwd_verify</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lock_dynamic_pwd.o(i.lock_dynamic_pwd_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = lock_dynamic_pwd_verify &rArr; verify_dynamic_pwd_token &rArr; TOTP &rArr; HMAC_SHA1 &rArr; SHA1 &rArr; SHA1Result &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_timestamp
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_dynamic_pwd_token
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
</UL>

<P><STRONG><a name="[24d]"></a>lock_evt_delete</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, app_flash.o(i.lock_evt_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lock_evt_delete &rArr; app_port_kv_del &rArr; ef_del_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_del
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_delete_all
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_offline_evt_report
</UL>

<P><STRONG><a name="[24e]"></a>lock_evt_delete_all</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_flash.o(i.lock_evt_delete_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = lock_evt_delete_all &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evtid_save
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_erease_all
</UL>

<P><STRONG><a name="[250]"></a>lock_evt_load</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, app_flash.o(i.lock_evt_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = lock_evt_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_offline_evt_report
</UL>

<P><STRONG><a name="[239]"></a>lock_evt_save</STRONG> (Thumb, 100 bytes, Stack size 296 bytes, app_flash.o(i.lock_evt_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_next_evtid
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_connect_status
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evtid_save
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_record_report
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_record_combine_report
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_alarm_record_report
</UL>

<P><STRONG><a name="[252]"></a>lock_evtid_load</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_flash.o(i.lock_evtid_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = lock_evtid_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_offline_evt_report
</UL>

<P><STRONG><a name="[24f]"></a>lock_evtid_save</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_flash.o(i.lock_evtid_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_delete_all
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_save
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_offline_evt_report
</UL>

<P><STRONG><a name="[103]"></a>lock_factory_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lock_common.o(i.lock_factory_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = lock_factory_handler &rArr; lock_flash_erease_all &rArr; lock_settings_delete_and_default &rArr; lock_settings_default &rArr; lock_settings_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_erease_all
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_tuya_ble_device_factory_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_write_auth_info_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_tuya_ble_sdk_callback
</UL>

<P><STRONG><a name="[253]"></a>lock_flash_erease_all</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_flash.o(i.lock_flash_erease_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = lock_flash_erease_all &rArr; lock_settings_delete_and_default &rArr; lock_settings_default &rArr; lock_settings_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_del
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_delete_and_default
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete_all
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_delete_all
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_factory_handler
</UL>

<P><STRONG><a name="[f9]"></a>lock_flash_init</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, app_flash.o(i.lock_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = lock_flash_init &rArr; lock_settings_default &rArr; lock_settings_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_load
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_default
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evtid_load
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_load
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_init
</UL>

<P><STRONG><a name="[266]"></a>lock_get_hardid</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_flash.o(i.lock_get_hardid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lock_get_hardid
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_pw_creat_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_creat_handler
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save_in_local_flash
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
</UL>

<P><STRONG><a name="[1df]"></a>lock_hard_creat_sub_report</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lock_dp_report.o(i.lock_hard_creat_sub_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lock_hard_creat_sub_report &rArr; app_port_dp_data_report &rArr; tuya_ble_dp_data_report &rArr; data_2_klvlist &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_report
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_report_outtime_handler
</UL>

<P><STRONG><a name="[259]"></a>lock_hard_creat_sub_report_with_delay</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lock_dp_report.o(i.lock_hard_creat_sub_report_with_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lock_hard_creat_sub_report_with_delay &rArr; lock_timer_start &rArr; app_port_timer_start &rArr; tuya_ble_timer_start &rArr; nrfs_timer_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_creat_handler
</UL>

<P><STRONG><a name="[25a]"></a>lock_hard_delete</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, app_flash.o(i.lock_hard_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lock_hard_delete &rArr; app_port_kv_del &rArr; ef_del_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_del
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_pw_delete_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_delete_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete_all
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete_all_by_memberid
</UL>

<P><STRONG><a name="[254]"></a>lock_hard_delete_all</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_flash.o(i.lock_hard_delete_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = lock_hard_delete_all &rArr; lock_hard_delete &rArr; app_port_kv_del &rArr; ef_del_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_erease_all
</UL>

<P><STRONG><a name="[25b]"></a>lock_hard_delete_all_by_memberid</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_flash.o(i.lock_hard_delete_all_by_memberid))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = lock_hard_delete_all_by_memberid &rArr; lock_hardid_load_by_memberid &rArr; lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_finger_delete
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_face_delete
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_doorcard_delete
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hardid_load_by_memberid
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_delete_handler
</UL>

<P><STRONG><a name="[e3]"></a>lock_hard_doorcard_cancel_reg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lock_hard.o(i.lock_hard_doorcard_cancel_reg))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[25d]"></a>lock_hard_doorcard_delete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lock_hard.o(i.lock_hard_doorcard_delete))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_delete_handler
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete_all_by_memberid
</UL>

<P><STRONG><a name="[e2]"></a>lock_hard_doorcard_start_reg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lock_hard.o(i.lock_hard_doorcard_start_reg))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[e7]"></a>lock_hard_face_cancel_reg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lock_hard.o(i.lock_hard_face_cancel_reg))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[25f]"></a>lock_hard_face_delete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lock_hard.o(i.lock_hard_face_delete))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_delete_handler
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete_all_by_memberid
</UL>

<P><STRONG><a name="[e6]"></a>lock_hard_face_start_reg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lock_hard.o(i.lock_hard_face_start_reg))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[e5]"></a>lock_hard_finger_cancel_reg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lock_hard.o(i.lock_hard_finger_cancel_reg))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[25e]"></a>lock_hard_finger_delete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lock_hard.o(i.lock_hard_finger_delete))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_delete_handler
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete_all_by_memberid
</UL>

<P><STRONG><a name="[e4]"></a>lock_hard_finger_start_reg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lock_hard.o(i.lock_hard_finger_start_reg))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[260]"></a>lock_hard_freezeorunfreeze</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, app_flash.o(i.lock_hard_freezeorunfreeze))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = lock_hard_freezeorunfreeze &rArr; lock_hard_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_load
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_freeze_or_unfreeze_handler
</UL>

<P><STRONG><a name="[262]"></a>lock_hard_freezeorunfreeze_all_by_memberid</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, app_flash.o(i.lock_hard_freezeorunfreeze_all_by_memberid))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = lock_hard_freezeorunfreeze_all_by_memberid &rArr; lock_hardid_load_by_memberid &rArr; lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hardid_load_by_memberid
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_load
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_freeze_or_unfreeze_handler
</UL>

<P><STRONG><a name="[256]"></a>lock_hard_load</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, app_flash.o(i.lock_hard_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_sync_handler
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hardid_load_by_memberid
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_meth_sync_new_report
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_modify_in_local_flash
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_modify_all_by_memberid
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_freezeorunfreeze_all_by_memberid
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_freezeorunfreeze
</UL>

<P><STRONG><a name="[263]"></a>lock_hard_modify_all_by_memberid</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, app_flash.o(i.lock_hard_modify_all_by_memberid))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = lock_hard_modify_all_by_memberid &rArr; lock_hardid_load_by_memberid &rArr; lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hardid_load_by_memberid
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_load
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_modify_handler
</UL>

<P><STRONG><a name="[264]"></a>lock_hard_modify_in_local_flash</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, app_flash.o(i.lock_hard_modify_in_local_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = lock_hard_modify_in_local_flash &rArr; lock_hard_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_load
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_pw_modify_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_modify_handler
</UL>

<P><STRONG><a name="[261]"></a>lock_hard_save</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, app_flash.o(i.lock_hard_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = lock_hard_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save_in_local_flash
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_modify_in_local_flash
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_modify_all_by_memberid
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_freezeorunfreeze_all_by_memberid
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_freezeorunfreeze
</UL>

<P><STRONG><a name="[265]"></a>lock_hard_save_in_local_flash</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, app_flash.o(i.lock_hard_save_in_local_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = lock_hard_save_in_local_flash &rArr; lock_hard_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_get_hardid
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_pw_creat_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_creat_handler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
</UL>

<P><STRONG><a name="[211]"></a>lock_hard_uart_simulate</STRONG> (Thumb, 752 bytes, Stack size 40 bytes, lock_hard.o(i.lock_hard_uart_simulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_start
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_state_sync_report
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_record_report
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_record_combine_report
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save_in_local_flash
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_creat_sub_report
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_get_hardid
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dynamic_pwd_verify
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_alarm_record_report
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_with_time_report
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_report
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_factory_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_process
</UL>

<P><STRONG><a name="[25c]"></a>lock_hardid_load_by_memberid</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, app_flash.o(i.lock_hardid_load_by_memberid))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = lock_hardid_load_by_memberid &rArr; lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_load
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_modify_all_by_memberid
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_freezeorunfreeze_all_by_memberid
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete_all_by_memberid
</UL>

<P><STRONG><a name="[269]"></a>lock_last_evtid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_flash.o(i.lock_last_evtid))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_offline_evt_report
</UL>

<P><STRONG><a name="[251]"></a>lock_next_evtid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_flash.o(i.lock_next_evtid))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_save
</UL>

<P><STRONG><a name="[101]"></a>lock_offline_evt_report</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lock_dp_report.o(i.lock_offline_evt_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = lock_offline_evt_report &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_with_time_report
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_last_evtid
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evtid_save
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evtid_load
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_load
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_delete
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_old_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_tuya_ble_sdk_callback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bonding_conn_outtime_cb_handler
</UL>

<P><STRONG><a name="[100]"></a>lock_open_meth_sync_new_report</STRONG> (Thumb, 450 bytes, Stack size 72 bytes, lock_dp_report.o(i.lock_open_meth_sync_new_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = lock_open_meth_sync_new_report &rArr; lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_report
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_load
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_meth_sync_new_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_tuya_ble_sdk_callback
</UL>

<P><STRONG><a name="[267]"></a>lock_open_record_combine_report</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lock_dp_report.o(i.lock_open_record_combine_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_timestamp
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_with_time_report
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
</UL>

<P><STRONG><a name="[1e0]"></a>lock_open_record_report</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lock_dp_report.o(i.lock_open_record_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = lock_open_record_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_timestamp
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_with_time_report
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_evt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_report_outtime_handler
</UL>

<P><STRONG><a name="[26a]"></a>lock_open_record_report_with_delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lock_dp_report.o(i.lock_open_record_report_with_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lock_open_record_report_with_delay &rArr; lock_timer_start &rArr; app_port_timer_start &rArr; tuya_ble_timer_start &rArr; nrfs_timer_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_nopwd_remote_handler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_bt_handler
</UL>

<P><STRONG><a name="[26b]"></a>lock_open_with_bt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lock_common.o(i.lock_open_with_bt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lock_open_with_bt &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_bt_handler
</UL>

<P><STRONG><a name="[26c]"></a>lock_open_with_nopwd_remote</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lock_common.o(i.lock_open_with_nopwd_remote))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lock_open_with_nopwd_remote &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_with_nopwd_remote_handler
</UL>

<P><STRONG><a name="[244]"></a>lock_remote_anti_lock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lock_common.o(i.lock_remote_anti_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lock_remote_anti_lock &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[258]"></a>lock_settings_default</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, app_flash.o(i.lock_settings_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = lock_settings_default &rArr; lock_settings_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_save
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_delete_and_default
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_init
</UL>

<P><STRONG><a name="[255]"></a>lock_settings_delete_and_default</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, app_flash.o(i.lock_settings_delete_and_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = lock_settings_delete_and_default &rArr; lock_settings_default &rArr; lock_settings_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_del
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_default
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_erease_all
</UL>

<P><STRONG><a name="[257]"></a>lock_settings_load</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, app_flash.o(i.lock_settings_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = lock_settings_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_flash_init
</UL>

<P><STRONG><a name="[245]"></a>lock_settings_save</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, app_flash.o(i.lock_settings_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = lock_settings_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_settings_default
</UL>

<P><STRONG><a name="[268]"></a>lock_state_sync_report</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lock_dp_report.o(i.lock_state_sync_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lock_state_sync_report &rArr; app_port_dp_data_report &rArr; tuya_ble_dp_data_report &rArr; data_2_klvlist &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_report
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
</UL>

<P><STRONG><a name="[210]"></a>lock_test_process</STRONG> (Thumb, 610 bytes, Stack size 168 bytes, lock_test.o(i.lock_test_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = lock_test_process &rArr; lock_test_rsp &rArr; tuya_ble_lock_test_rsp &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_string_op_hex2hexstr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_reverse_byte
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_connect_status
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_bt_mac_addr
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_rsp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_mode_exit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_mode_enter
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lock_test_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_process
</UL>

<P><STRONG><a name="[23b]"></a>lock_timer_creat</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, lock_timer.o(i.lock_timer_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lock_timer_creat &rArr; app_port_timer_create &rArr; tuya_ble_timer_create &rArr; nrfs_timer_create &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_common_init
</UL>

<P><STRONG><a name="[e8]"></a>lock_timer_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lock_timer.o(i.lock_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lock_timer_start &rArr; app_port_timer_start &rArr; tuya_ble_timer_start &rArr; nrfs_timer_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_exit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_tuya_ble_sdk_callback
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_record_report_with_delay
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_creat_sub_report_with_delay
</UL>

<P><STRONG><a name="[ea]"></a>lock_timer_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lock_timer.o(i.lock_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lock_timer_stop &rArr; app_port_timer_stop &rArr; tuya_ble_timer_stop &rArr; nrfs_timer_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_tuya_ble_sdk_callback
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = main &rArr; idle_state_handle &rArr; tuya_ble_main_tasks_exec &rArr; tuya_sched_execute &rArr; tuya_ble_event_process &rArr; tuya_ble_handle_ble_cmd_evt &rArr; tuya_ble_evt_process &rArr; tuya_ble_handle_ble_factory_test_req &rArr; tuya_ble_app_production_test_process &rArr; app_port_factory_test_process &rArr; factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_common_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_uart_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_svc_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_init_bt_mac_addr
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_gatt_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_gap_params_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_stack_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_scan_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_start
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_management_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_state_handle
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[284]"></a>mbedtls_aes_crypt_cbc</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, aes.o(i.mbedtls_aes_crypt_cbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_cbc_encrypt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_cbc_decrypt
</UL>

<P><STRONG><a name="[285]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, aes.o(i.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_ecb_encrypt
</UL>

<P><STRONG><a name="[288]"></a>mbedtls_aes_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes.o(i.mbedtls_aes_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_ecb_encrypt
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_cbc_encrypt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_cbc_decrypt
</UL>

<P><STRONG><a name="[28a]"></a>mbedtls_aes_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, aes.o(i.mbedtls_aes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_ecb_encrypt
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_cbc_encrypt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_cbc_decrypt
</UL>

<P><STRONG><a name="[28b]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 210 bytes, Stack size 320 bytes, aes.o(i.mbedtls_aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_cbc_decrypt
</UL>

<P><STRONG><a name="[28c]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 504 bytes, Stack size 20 bytes, aes.o(i.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_ecb_encrypt
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_cbc_encrypt
</UL>

<P><STRONG><a name="[287]"></a>mbedtls_internal_aes_decrypt</STRONG> (Thumb, 1262 bytes, Stack size 52 bytes, aes.o(i.mbedtls_internal_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[286]"></a>mbedtls_internal_aes_encrypt</STRONG> (Thumb, 1262 bytes, Stack size 52 bytes, aes.o(i.mbedtls_internal_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_internal_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[28f]"></a>mbedtls_internal_md5_process</STRONG> (Thumb, 2222 bytes, Stack size 84 bytes, md5.o(i.mbedtls_internal_md5_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_internal_md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update_ret
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish_ret
</UL>

<P><STRONG><a name="[28d]"></a>mbedtls_md5_finish</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md5.o(i.mbedtls_md5_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mbedtls_md5_finish &rArr; mbedtls_md5_finish_ret &rArr; mbedtls_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_md5_crypt
</UL>

<P><STRONG><a name="[28e]"></a>mbedtls_md5_finish_ret</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, md5.o(i.mbedtls_md5_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mbedtls_md5_finish_ret &rArr; mbedtls_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</UL>

<P><STRONG><a name="[290]"></a>mbedtls_md5_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md5.o(i.mbedtls_md5_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md5_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_md5_crypt
</UL>

<P><STRONG><a name="[291]"></a>mbedtls_md5_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md5.o(i.mbedtls_md5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md5_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_md5_crypt
</UL>

<P><STRONG><a name="[292]"></a>mbedtls_md5_starts</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, md5.o(i.mbedtls_md5_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbedtls_md5_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_md5_crypt
</UL>

<P><STRONG><a name="[293]"></a>mbedtls_md5_starts_ret</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, md5.o(i.mbedtls_md5_starts_ret))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
</UL>

<P><STRONG><a name="[294]"></a>mbedtls_md5_update</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md5.o(i.mbedtls_md5_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mbedtls_md5_update &rArr; mbedtls_md5_update_ret &rArr; mbedtls_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_md5_crypt
</UL>

<P><STRONG><a name="[295]"></a>mbedtls_md5_update_ret</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, md5.o(i.mbedtls_md5_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mbedtls_md5_update_ret &rArr; mbedtls_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>

<P><STRONG><a name="[289]"></a>mbedtls_platform_zeroize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, platform_util.o(i.mbedtls_platform_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>

<P><STRONG><a name="[29a]"></a>nrf_atfifo_clear</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
</UL>

<P><STRONG><a name="[223]"></a>nrf_atfifo_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[208]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[29d]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
</UL>

<P><STRONG><a name="[29e]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_load_next
</UL>

<P><STRONG><a name="[209]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[1ac]"></a>nrf_atflags_clear</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atflags.o(i.nrf_atflags_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[19e]"></a>nrf_atflags_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_atflags.o(i.nrf_atflags_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>

<P><STRONG><a name="[1aa]"></a>nrf_atflags_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atflags.o(i.nrf_atflags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[20d]"></a>nrf_atomic_flag_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[277]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[275]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[20b]"></a>nrf_atomic_flag_set_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1b6]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_flash_op_index
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[2a0]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
</UL>

<P><STRONG><a name="[2a2]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[2a3]"></a>nrf_atomic_u32_fetch_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>

<P><STRONG><a name="[1e4]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[2a1]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[21d]"></a>nrf_atomic_u32_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_store
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_flash_op_index
</UL>

<P><STRONG><a name="[2a8]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[2aa]"></a>nrf_balloc_alloc</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_idx2block
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[2ac]"></a>nrf_balloc_free</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_block2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[2fb]"></a>nrf_balloc_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[2ae]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_gatt_init
</UL>

<P><STRONG><a name="[6c]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_data_length_update_request_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfs_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[2b8]"></a>nrf_ble_scan_init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nrf_ble_scan.o(i.nrf_ble_scan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ble_scan_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_default_param_set
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_default_conn_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_scan_init
</UL>

<P><STRONG><a name="[6b]"></a>nrf_ble_scan_on_ble_evt</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, nrf_ble_scan.o(i.nrf_ble_scan_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = nrf_ble_scan_on_ble_evt &rArr; nrf_ble_scan_on_adv_report &rArr; adv_uuid_compare &rArr; ble_advdata_uuid_find &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_timeout
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_req_report
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_connected_evt
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_adv_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfs_scan_adv.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[2c0]"></a>nrf_ble_scan_params_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_ble_scan.o(i.nrf_ble_scan_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ble_scan_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_stop
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_default_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_scan_init
</UL>

<P><STRONG><a name="[2b7]"></a>nrf_ble_scan_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_ble_scan.o(i.nrf_ble_scan_stop))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_params_set
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_connect_with_target
</UL>

<P><STRONG><a name="[2c1]"></a>nrf_dfu_flash_erase</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nrf_dfu_flash.o(i.nrf_dfu_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nrf_dfu_flash_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write
</UL>

<P><STRONG><a name="[2c3]"></a>nrf_dfu_flash_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_dfu_flash.o(i.nrf_dfu_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_dfu_flash_init &rArr; nrf_fstorage_init &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_init
</UL>

<P><STRONG><a name="[2c5]"></a>nrf_dfu_flash_store</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nrf_dfu_flash.o(i.nrf_dfu_flash_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nrf_dfu_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write
</UL>

<P><STRONG><a name="[133]"></a>nrf_dfu_settings_init</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, nrf_dfu_settings.o(i.nrf_dfu_settings_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrf_dfu_settings_init &rArr; nrf_dfu_settings_write_and_backup &rArr; settings_backup &rArr; settings_write &rArr; nrf_dfu_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_write_and_backup
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_forbidden_parts_copy_from_backup
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_crc_ok
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_backup_crc_ok
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dfu_settings_init
</UL>

<P><STRONG><a name="[2cb]"></a>nrf_dfu_settings_write</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_dfu_settings.o(i.nrf_dfu_settings_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_dfu_settings_write &rArr; settings_write &rArr; nrf_dfu_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_crc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_write_and_backup
</UL>

<P><STRONG><a name="[134]"></a>nrf_dfu_settings_write_and_backup</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_dfu_settings.o(i.nrf_dfu_settings_write_and_backup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_dfu_settings_write_and_backup &rArr; settings_backup &rArr; settings_write &rArr; nrf_dfu_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_backup
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dfu_settings_write_and_backup
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_init
</UL>

<P><STRONG><a name="[2ce]"></a>nrf_drv_clock_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[2d1]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[17e]"></a>nrf_drv_uart_init</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[2d8]"></a>nrf_fprintf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[1b9]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[2d9]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[2c2]"></a>nrf_fstorage_erase</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_page_aligned
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_erase
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_flash_erase
</UL>

<P><STRONG><a name="[2c4]"></a>nrf_fstorage_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_fstorage_init &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_flash_init
</UL>

<P><STRONG><a name="[2de]"></a>nrf_fstorage_read</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_read
</UL>

<P><STRONG><a name="[71]"></a>nrf_fstorage_sdh_req_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_req_observers0)
</UL>
<P><STRONG><a name="[77]"></a>nrf_fstorage_sdh_state_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_fstorage_sdh_state_handler &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[73]"></a>nrf_fstorage_sys_evt_handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + In Cycle
<LI>Call Chain = nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[2c6]"></a>nrf_fstorage_write</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, nrf_fstorage.o(i.nrf_fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_write
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_flash_store
</UL>

<P><STRONG><a name="[2e8]"></a>nrf_log_backend_add</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_backend_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backend_id_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[2ea]"></a>nrf_log_backend_rtt_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[2eb]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 242 bytes, Stack size 112 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[342]"></a>nrf_log_color_id_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[274]"></a>nrf_log_default_backends_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_log_default_backends.o(i.nrf_log_default_backends_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_default_backends_init &rArr; nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[107]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 756 bytes, Stack size 80 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_system_reset
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_state_handle
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[2ca]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write
</UL>

<P><STRONG><a name="[1da]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_backup
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_flash_store
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_flash_erase
</UL>

<P><STRONG><a name="[1d9]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_log_frontend_std_2 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>

<P><STRONG><a name="[2db]"></a>nrf_log_frontend_std_3</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_read
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[2ef]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[273]"></a>nrf_log_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[298]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>

<P><STRONG><a name="[2f9]"></a>nrf_log_module_name_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[106]"></a>nrf_log_panic</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_system_reset
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[2ee]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[2f2]"></a>nrf_memobj_alloc</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[2fa]"></a>nrf_memobj_free</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[2ec]"></a>nrf_memobj_get</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[2f7]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[2f0]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[2ed]"></a>nrf_memobj_read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_read &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[2f3]"></a>nrf_memobj_write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_write &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[20c]"></a>nrf_nvmc_page_erase</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, nrf_nvmc.o(i.nrf_nvmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_nvmc_page_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_flash_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[2fd]"></a>nrf_nvmc_write_words</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, nrf_nvmc.o(i.nrf_nvmc_write_words))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_nvmc_write_words
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_flash_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[2fe]"></a>nrf_pwr_mgmt_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_pwr_mgmt_init &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_management_init
</UL>

<P><STRONG><a name="[221]"></a>nrf_pwr_mgmt_run</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_pwr_mgmt_run &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_state_handle
</UL>

<P><STRONG><a name="[2f8]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[301]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[300]"></a>nrf_sdh_ble_default_cfg_set</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_default_cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nrf_sdh_ble_default_cfg_set &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_stack_init
</UL>

<P><STRONG><a name="[302]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nrf_sdh_ble_enable &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_end_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_stack_init
</UL>

<P><STRONG><a name="[305]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, nrf_sdh.o(i.nrf_sdh_disable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_sdh_disable_request &rArr; softdevice_evt_irq_disable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[309]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_stack_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[b3]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[222]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[2e4]"></a>nrf_sdh_request_continue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_sdh.o(i.nrf_sdh_request_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrf_sdh_request_continue &rArr; nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[2ff]"></a>nrf_section_iter_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[304]"></a>nrf_section_iter_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[30d]"></a>nrf_strerror_find</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_strerror.o(i.nrf_strerror_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>

<P><STRONG><a name="[105]"></a>nrf_strerror_get</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrf_strerror.o(i.nrf_strerror_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_strerror_get &rArr; nrf_strerror_find
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>

<P><STRONG><a name="[27d]"></a>nrfs_adv_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, nrfs_scan_adv.o(i.nrfs_adv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrfs_adv_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[282]"></a>nrfs_adv_start</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nrfs_scan_adv.o(i.nrfs_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrfs_adv_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_update_advDataAndScanRsp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_set_bt_mac_addr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_evt_handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[310]"></a>nrfs_adv_state_update</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfs_scan_adv.o(i.nrfs_adv_state_update))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_evt_handler
</UL>

<P><STRONG><a name="[30e]"></a>nrfs_adv_stop</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrfs_scan_adv.o(i.nrfs_adv_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrfs_adv_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_update_advDataAndScanRsp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_set_bt_mac_addr
</UL>

<P><STRONG><a name="[30f]"></a>nrfs_adv_update_advDataAndScanRsp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, nrfs_scan_adv.o(i.nrfs_adv_update_advDataAndScanRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrfs_adv_update_advDataAndScanRsp &rArr; nrfs_adv_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_stop
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_advertising_scan_rsp_data_update
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_advertising_adv_data_update
</UL>

<P><STRONG><a name="[27a]"></a>nrfs_ble_stack_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nrfs_ble.o(i.nrfs_ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrfs_ble_stack_init &rArr; nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>nrfs_conn_param_update</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, nrfs_ble.o(i.nrfs_conn_param_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrfs_conn_param_update &rArr; nrfs_set_conn_param &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_set_conn_param
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_conn_param_update
</UL>

<P><STRONG><a name="[314]"></a>nrfs_delay_ms</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrfs_timer.o(i.nrfs_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfs_delay_ms &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_svc_send_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_delay_ms
</UL>

<P><STRONG><a name="[39d]"></a>nrfs_disconnect</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrfs_ble.o(i.nrfs_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfs_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_disconnect
</UL>

<P><STRONG><a name="[316]"></a>nrfs_enter_critical</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfs_common.o(i.nrfs_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_enter_critical
</UL>

<P><STRONG><a name="[317]"></a>nrfs_exit_critical</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfs_common.o(i.nrfs_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfs_exit_critical &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_exit_critical
</UL>

<P><STRONG><a name="[318]"></a>nrfs_flash_erase</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, nrfs_flash.o(i.nrfs_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nrfs_flash_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_flash_op_index
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_erase
</UL>

<P><STRONG><a name="[146]"></a>nrfs_flash_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrfs_flash.o(i.nrfs_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrfs_flash_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_store
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_init
</UL>

<P><STRONG><a name="[31a]"></a>nrfs_flash_read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrfs_flash.o(i.nrfs_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nrfs_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_read
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_read
</UL>

<P><STRONG><a name="[31b]"></a>nrfs_flash_write</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, nrfs_flash.o(i.nrfs_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrfs_flash_write &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_flash_op_index
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_write
</UL>

<P><STRONG><a name="[27b]"></a>nrfs_gap_params_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrfs_ble.o(i.nrfs_gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrfs_gap_params_init &rArr; nrfs_set_defConn_param &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_set_defConn_param
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27c]"></a>nrfs_gatt_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrfs_ble.o(i.nrfs_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrfs_gatt_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>nrfs_get_old_timestamp</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, nrfs_timer.o(i.nrfs_get_old_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrfs_get_old_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_get_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_old_timestamp
</UL>

<P><STRONG><a name="[142]"></a>nrfs_get_timestamp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfs_timer.o(i.nrfs_get_timestamp))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_timestamp
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_get_old_timestamp
</UL>

<P><STRONG><a name="[281]"></a>nrfs_init_bt_mac_addr</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nrfs_ble.o(i.nrfs_init_bt_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = nrfs_init_bt_mac_addr &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_string_op_hexstr2hex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_set_bt_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>nrfs_local_timer_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrfs_timer.o(i.nrfs_local_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrfs_local_timer_start &rArr; rtc2_start &rArr; rtc2_config &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc2_start
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_local_clock_start
</UL>

<P><STRONG><a name="[123]"></a>nrfs_log_hexdump</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrfs_common.o(i.nrfs_log_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nrfs_log_hexdump &rArr; elog_hexdump &rArr; elog_port_output &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_with_time_report
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_report
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_uart_simulate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_common_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ota_rsp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_handler
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_uart_send
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_process
</UL>

<P><STRONG><a name="[36e]"></a>nrfs_log_hexdump_empty</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrfs_common.o(i.nrfs_log_hexdump_empty))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sdk_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_ota_response
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_write_req
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_id_encrypt
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_uart_cmd_evt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[278]"></a>nrfs_log_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrfs_common.o(i.nrfs_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nrfs_log_init &rArr; elog_start &rArr; elog_set_output_enabled &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_fmt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27f]"></a>nrfs_scan_init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, nrfs_scan_adv.o(i.nrfs_scan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrfs_scan_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_params_set
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>nrfs_set_bt_mac_addr</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, nrfs_ble.o(i.nrfs_set_bt_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrfs_set_bt_mac_addr &rArr; nrfs_adv_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_stop
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_set_bt_mac_addr
</UL>

<P><STRONG><a name="[313]"></a>nrfs_set_conn_param</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nrfs_ble.o(i.nrfs_set_conn_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrfs_set_conn_param &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_conn_param_update
</UL>

<P><STRONG><a name="[27e]"></a>nrfs_svc_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrfs_svc.o(i.nrfs_svc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrfs_svc_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31e]"></a>nrfs_svc_send_data</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, nrfs_svc.o(i.nrfs_svc_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrfs_svc_send_data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_delay_ms
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gatt_send_data
</UL>

<P><STRONG><a name="[31f]"></a>nrfs_system_reset</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, nrfs_common.o(i.nrfs_system_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nrfs_system_reset &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_reset
</UL>

<P><STRONG><a name="[283]"></a>nrfs_test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrfs_test.o(i.nrfs_test))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[320]"></a>nrfs_timer_create</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, nrfs_timer.o(i.nrfs_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrfs_timer_create &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_timer_create
</UL>

<P><STRONG><a name="[323]"></a>nrfs_timer_start</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, nrfs_timer.o(i.nrfs_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrfs_timer_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_timer_ms
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_timer_start
</UL>

<P><STRONG><a name="[325]"></a>nrfs_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrfs_timer.o(i.nrfs_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrfs_timer_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_timer_stop
</UL>

<P><STRONG><a name="[280]"></a>nrfs_uart_init</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, nrfs_uart.o(i.nrfs_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrfs_uart_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[326]"></a>nrfs_uart_send</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrfs_uart.o(i.nrfs_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrfs_uart_send &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_send_data
</UL>

<P><STRONG><a name="[160]"></a>nrfs_update_timestamp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfs_timer.o(i.nrfs_update_timestamp))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_update_timestamp
</UL>

<P><STRONG><a name="[2d0]"></a>nrfx_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[2cf]"></a>nrfx_clock_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[234]"></a>nrfx_clock_lfclk_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_clock_lfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_lf_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>

<P><STRONG><a name="[32b]"></a>nrfx_prs_acquire</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_prs_acquire &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[32d]"></a>nrfx_rtc_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrfx_rtc.o(i.nrfx_rtc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_rtc_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc2_config
</UL>

<P><STRONG><a name="[34d]"></a>nrfx_rtc_init</STRONG> (Thumb, 178 bytes, Stack size 28 bytes, nrfx_rtc.o(i.nrfx_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_rtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc2_config
</UL>

<P><STRONG><a name="[32f]"></a>nrfx_rtc_tick_enable</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrfx_rtc.o(i.nrfx_rtc_tick_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_rtc_tick_enable &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc2_config
</UL>

<P><STRONG><a name="[55]"></a>nrfx_uart_0_irq_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrfx_uart_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uart_0_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[2d3]"></a>nrfx_uart_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[2d5]"></a>nrfx_uart_rx</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[2d7]"></a>nrfx_uart_tx</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[181]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[56]"></a>nrfx_uarte_0_irq_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrfx_uarte_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uarte_0_irq_handler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uarte.o(.constdata)
</UL>
<P><STRONG><a name="[2d2]"></a>nrfx_uarte_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrfx_uarte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[2d4]"></a>nrfx_uarte_rx</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrfx_uarte_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_uarte_rx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_disable
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[2d6]"></a>nrfx_uarte_tx</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_uarte_tx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[180]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[344]"></a>pvTuyaPortMalloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tuya_ble_heap.o(i.pvTuyaPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_exit_critical
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_enter_critical
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
</UL>

<P><STRONG><a name="[ee]"></a>reset_with_disconn_outtime_cb_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lock_timer.o(i.reset_with_disconn_outtime_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = reset_with_disconn_outtime_cb_handler &rArr; app_port_device_reset &rArr; tuya_ble_device_reset &rArr; nrfs_system_reset &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_device_reset
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ble_gap_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_process
</UL>

<P><STRONG><a name="[2cd]"></a>settings_backup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_dfu_settings.o(i.settings_backup))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = settings_backup &rArr; settings_write &rArr; nrf_dfu_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_write_and_backup
</UL>

<P><STRONG><a name="[cd]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[35d]"></a>trsmitr_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tuya_ble_mutli_tsf_protocol.o(i.trsmitr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trsmitr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[1a0]"></a>trsmitr_recv_pkg_decode</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, tuya_ble_mutli_tsf_protocol.o(i.trsmitr_recv_pkg_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = trsmitr_recv_pkg_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_data_unpack
</UL>

<P><STRONG><a name="[35e]"></a>trsmitr_send_pkg_encode</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, tuya_ble_mutli_tsf_protocol.o(i.trsmitr_send_pkg_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trsmitr_send_pkg_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_frame_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[361]"></a>tuya_ble_adv_change</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, tuya_ble_main.o(i.tuya_ble_adv_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tuya_ble_adv_change &rArr; tuya_ble_device_id_encrypt &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_advertising_scan_rsp_data_update
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_advertising_adv_data_update
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_encrypt_old_with_key
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_id_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sdk_init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_pair_req
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_factory_reset_evt
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_device_info_update_evt
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_unbond
</UL>

<P><STRONG><a name="[366]"></a>tuya_ble_aes128_cbc_decrypt</STRONG> (Thumb, 82 bytes, Stack size 312 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_aes128_cbc_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = tuya_ble_aes128_cbc_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_decryption
</UL>

<P><STRONG><a name="[367]"></a>tuya_ble_aes128_cbc_encrypt</STRONG> (Thumb, 82 bytes, Stack size 312 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_aes128_cbc_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_generate_key1
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_id_encrypt
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_encryption
</UL>

<P><STRONG><a name="[368]"></a>tuya_ble_aes128_ecb_encrypt</STRONG> (Thumb, 94 bytes, Stack size 304 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_aes128_ecb_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tuya_ble_aes128_ecb_encrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_encrypt_old_with_key
</UL>

<P><STRONG><a name="[369]"></a>tuya_ble_app_production_test_process</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_app_production_test_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = tuya_ble_app_production_test_process &rArr; app_port_factory_test_process &rArr; factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_factory_test_process
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_factory_test_req
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_uart_cmd_evt
</UL>

<P><STRONG><a name="[127]"></a>tuya_ble_callback_queue_register</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tuya_ble_api.o(i.tuya_ble_callback_queue_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tuya_ble_callback_queue_register &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_exit_critical
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ble_callback_queue_register
</UL>

<P><STRONG><a name="[36a]"></a>tuya_ble_cb_event_send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tuya_ble_main.o(i.tuya_ble_cb_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tuya_ble_cb_event_send &rArr; tuya_ble_inter_event_response &rArr; tuya_ble_free &rArr; vTuyaPortFree &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_inter_event_response
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_unix_time_char_ms_resp
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_unbond_req
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_pair_req
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ota_req
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_net_config_info_req
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_write_req
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_query_req
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_with_time_report_res
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_report_res
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_device_reset_req
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_passthrough_data_req
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_anomaly_unbond_req
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_connect_change_evt
</UL>

<P><STRONG><a name="[36c]"></a>tuya_ble_commData_send</STRONG> (Thumb, 512 bytes, Stack size 128 bytes, tuya_ble_data_handler.o(i.tuya_ble_commData_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_get
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gatt_send_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_delay_ms
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump_empty
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ble_send_sn
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_encryption
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_crc16_compute
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trsmitr_send_pkg_encode
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trsmitr_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trsmitr_subpkg_len
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trsmitr_subpkg
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_lock_test_rsp
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_unbond_req
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_pair_req
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_net_config_info_req
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_write_req
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_query_req
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_device_reset_req
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dev_infor_req
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_factory_test_req
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_anomaly_unbond_req
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ota_response_evt
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_net_config_response_evt
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_with_time_reported_evt
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_reported_evt
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_data_passthrough_evt
</UL>

<P><STRONG><a name="[372]"></a>tuya_ble_commonData_rx_proc</STRONG> (Thumb, 340 bytes, Stack size 72 bytes, tuya_ble_data_handler.o(i.tuya_ble_commonData_rx_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = tuya_ble_commonData_rx_proc &rArr; tuya_ble_decryption &rArr; tuya_ble_aes128_cbc_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_get
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_disconnect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump_empty
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ble_receive_sn
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_data_unpack
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cmd_data_crc_check
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_send
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_decryption
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_ota_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_process
</UL>

<P><STRONG><a name="[3a1]"></a>tuya_ble_connect_monitor_timer_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tuya_ble_api.o(i.tuya_ble_connect_monitor_timer_start))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_connect_change_evt
</UL>

<P><STRONG><a name="[3a5]"></a>tuya_ble_connect_monitor_timer_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tuya_ble_api.o(i.tuya_ble_connect_monitor_timer_stop))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_pair_req
</UL>

<P><STRONG><a name="[13e]"></a>tuya_ble_connect_status_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tuya_ble_main.o(i.tuya_ble_connect_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_connect_status
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_monitor_outtime_cb_handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_ota_response
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_with_time_report
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_report
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_unbond_req
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_pair_req
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_device_reset_req
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_anomaly_unbond_req
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_connect_change_evt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[376]"></a>tuya_ble_connect_status_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tuya_ble_main.o(i.tuya_ble_connect_status_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tuya_ble_connect_status_set &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_exit_critical
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sdk_init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_pair_req
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_connect_change_evt
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_unbond
</UL>

<P><STRONG><a name="[311]"></a>tuya_ble_connected_handler</STRONG> (Thumb, 26 bytes, Stack size 48 bytes, tuya_ble_api.o(i.tuya_ble_connected_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tuya_ble_connected_handler &rArr; tuya_ble_event_send &rArr; tuya_ble_message_send &rArr; tuya_ble_sched_event_put
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_evt_handler
</UL>

<P><STRONG><a name="[19b]"></a>tuya_ble_crc16_compute</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tuya_ble_utils.o(i.tuya_ble_crc16_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tuya_ble_crc16_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cmd_data_crc_check
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[194]"></a>tuya_ble_crc32_compute</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, tuya_ble_utils.o(i.tuya_ble_crc32_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tuya_ble_crc32_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settings_crc_get
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_settings_crc_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_sys_settings
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_auth_settings
</UL>

<P><STRONG><a name="[128]"></a>tuya_ble_custom_event_send</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tuya_ble_main.o(i.tuya_ble_custom_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tuya_ble_custom_event_send &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_exit_critical
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_enter_critical
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_message_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ble_custom_event_send
</UL>

<P><STRONG><a name="[373]"></a>tuya_ble_decryption</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, tuya_ble_cryption_api.o(i.tuya_ble_decryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = tuya_ble_decryption &rArr; tuya_ble_aes128_cbc_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_free &rArr; mbedtls_platform_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_cbc_decrypt
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_key_generate
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
</UL>

<P><STRONG><a name="[370]"></a>tuya_ble_device_delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_device_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tuya_ble_device_delay_ms &rArr; nrfs_delay_ms &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[21a]"></a>tuya_ble_device_enter_critical</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_device_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_custom_event_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_callback_queue_register
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ble_receive_sn
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ble_send_sn
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_set
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTuyaPortFree
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTuyaPortMalloc
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_reset_ble_sn
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_pair_rand_clear
</UL>

<P><STRONG><a name="[21b]"></a>tuya_ble_device_exit_critical</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_device_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tuya_ble_device_exit_critical &rArr; nrfs_exit_critical &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_exit_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_custom_event_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_callback_queue_register
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ble_receive_sn
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ble_send_sn
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_set
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTuyaPortFree
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTuyaPortMalloc
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_reset_ble_sn
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_pair_rand_clear
</UL>

<P><STRONG><a name="[15d]"></a>tuya_ble_device_factory_reset</STRONG> (Thumb, 28 bytes, Stack size 48 bytes, tuya_ble_api.o(i.tuya_ble_device_factory_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tuya_ble_device_factory_reset &rArr; tuya_ble_event_send &rArr; tuya_ble_message_send &rArr; tuya_ble_sched_event_put
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_tuya_ble_device_factory_reset
</UL>

<P><STRONG><a name="[363]"></a>tuya_ble_device_id_encrypt</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, tuya_ble_cryption_api.o(i.tuya_ble_device_id_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tuya_ble_device_id_encrypt &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_cbc_encrypt
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump_empty
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_id_key_generate
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_adv_change
</UL>

<P><STRONG><a name="[132]"></a>tuya_ble_device_reset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_device_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tuya_ble_device_reset &rArr; nrfs_system_reset &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_system_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_device_reset
</UL>

<P><STRONG><a name="[37b]"></a>tuya_ble_device_unbond</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tuya_ble_data_handler.o(i.tuya_ble_device_unbond))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tuya_ble_device_unbond &rArr; tuya_ble_adv_change &rArr; tuya_ble_device_id_encrypt &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_disconnect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_sys_settings
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_set
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_adv_change
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_unbond_req
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_device_reset_req
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_anomaly_unbond_req
</UL>

<P><STRONG><a name="[312]"></a>tuya_ble_disconnected_handler</STRONG> (Thumb, 26 bytes, Stack size 48 bytes, tuya_ble_api.o(i.tuya_ble_disconnected_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tuya_ble_disconnected_handler &rArr; tuya_ble_event_send &rArr; tuya_ble_message_send &rArr; tuya_ble_sched_event_put
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_ble_evt_handler
</UL>

<P><STRONG><a name="[137]"></a>tuya_ble_dp_data_report</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, tuya_ble_api.o(i.tuya_ble_dp_data_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tuya_ble_dp_data_report &rArr; data_2_klvlist &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_get
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_send
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_klv_list
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_klvlist
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_report
</UL>

<P><STRONG><a name="[139]"></a>tuya_ble_dp_data_with_time_report</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, tuya_ble_api.o(i.tuya_ble_dp_data_with_time_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tuya_ble_dp_data_with_time_report &rArr; data_2_klvlist &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_get
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_send
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_klv_list
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_klvlist
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dp_data_with_time_report
</UL>

<P><STRONG><a name="[362]"></a>tuya_ble_encrypt_old_with_key</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, tuya_ble_cryption_api.o(i.tuya_ble_encrypt_old_with_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tuya_ble_encrypt_old_with_key &rArr; tuya_ble_aes128_ecb_encrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_ecb_encrypt
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_Add_Pkcs
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_hextoascii
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_adv_change
</UL>

<P><STRONG><a name="[36f]"></a>tuya_ble_encryption</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, tuya_ble_cryption_api.o(i.tuya_ble_encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_cbc_encrypt
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_key_generate
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_Add_Pkcs
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[37d]"></a>tuya_ble_event_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tuya_ble_main.o(i.tuya_ble_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tuya_ble_event_init &rArr; tuya_ble_event_queue_init &rArr; tuya_ble_sched_init
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sdk_init
</UL>

<P><STRONG><a name="[37f]"></a>tuya_ble_event_process</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, tuya_ble_main.o(i.tuya_ble_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = tuya_ble_event_process &rArr; tuya_ble_handle_ble_cmd_evt &rArr; tuya_ble_evt_process &rArr; tuya_ble_handle_ble_factory_test_req &rArr; tuya_ble_app_production_test_process &rArr; app_port_factory_test_process &rArr; factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_uart_cmd_evt
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ota_response_evt
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_net_config_response_evt
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_factory_reset_evt
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_with_time_reported_evt
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_reported_evt
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_device_info_update_evt
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_data_passthrough_evt
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_connect_change_evt
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_cmd_evt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_sched_execute
</UL>

<P><STRONG><a name="[37e]"></a>tuya_ble_event_queue_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tuya_ble_event.o(i.tuya_ble_event_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tuya_ble_event_queue_init &rArr; tuya_ble_sched_init
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_init
</UL>

<P><STRONG><a name="[375]"></a>tuya_ble_event_send</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tuya_ble_main.o(i.tuya_ble_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tuya_ble_event_send &rArr; tuya_ble_message_send &rArr; tuya_ble_sched_event_put
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_message_send
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_ota_response
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_with_time_report
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_report
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_factory_reset
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_receive_data
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gatt_receive_data
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_disconnected_handler
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connected_handler
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
</UL>

<P><STRONG><a name="[38b]"></a>tuya_ble_evt_process</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, tuya_ble_data_handler.o(i.tuya_ble_evt_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = tuya_ble_evt_process &rArr; tuya_ble_handle_ble_factory_test_req &rArr; tuya_ble_app_production_test_process &rArr; app_port_factory_test_process &rArr; factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_unix_time_char_ms_resp
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_unbond_req
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_pair_req
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ota_req
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_net_config_info_req
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_write_req
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_query_req
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_with_time_report_res
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_report_res
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_device_reset_req
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dev_infor_req
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_passthrough_data_req
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_factory_test_req
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_anomaly_unbond_req
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_cmd_evt
</UL>

<P><STRONG><a name="[13c]"></a>tuya_ble_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tuya_ble_mem.o(i.tuya_ble_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tuya_ble_free &rArr; vTuyaPortFree &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTuyaPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_free
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_ota_response
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_with_time_report
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_report
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_receive_data
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ota_req
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_net_config_info_req
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_write_req
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_query_req
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_passthrough_data_req
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_factory_test_req
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_klv_list
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_klvlist
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_inter_event_response
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_uart_cmd_evt
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ota_response_evt
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_with_time_reported_evt
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_reported_evt
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_data_passthrough_evt
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_cmd_evt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
</UL>

<P><STRONG><a name="[364]"></a>tuya_ble_gap_advertising_adv_data_update</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_gap_advertising_adv_data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tuya_ble_gap_advertising_adv_data_update &rArr; nrfs_adv_update_advDataAndScanRsp &rArr; nrfs_adv_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_update_advDataAndScanRsp
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_err_code_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_adv_change
</UL>

<P><STRONG><a name="[365]"></a>tuya_ble_gap_advertising_scan_rsp_data_update</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_gap_advertising_scan_rsp_data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tuya_ble_gap_advertising_scan_rsp_data_update &rArr; nrfs_adv_update_advDataAndScanRsp &rArr; nrfs_adv_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_update_advDataAndScanRsp
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_err_code_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_adv_change
</UL>

<P><STRONG><a name="[12a]"></a>tuya_ble_gap_disconnect</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_gap_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tuya_ble_gap_disconnect &rArr; nrfs_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_disconnect
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_m_conn_handle
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_err_code_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ble_gap_disconnect
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_pair_req
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_unbond
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
</UL>

<P><STRONG><a name="[33f]"></a>tuya_ble_gatt_receive_data</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, tuya_ble_api.o(i.tuya_ble_gatt_receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tuya_ble_gatt_receive_data &rArr; tuya_ble_event_send &rArr; tuya_ble_message_send &rArr; tuya_ble_sched_event_put
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[371]"></a>tuya_ble_gatt_send_data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_gatt_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tuya_ble_gatt_send_data &rArr; nrfs_svc_send_data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_svc_send_data
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_m_conn_handle
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_err_code_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[37c]"></a>tuya_ble_hextoascii</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tuya_ble_utils.o(i.tuya_ble_hextoascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tuya_ble_hextoascii
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_encrypt_old_with_key
</UL>

<P><STRONG><a name="[36b]"></a>tuya_ble_inter_event_response</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tuya_ble_main.o(i.tuya_ble_inter_event_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tuya_ble_inter_event_response &rArr; tuya_ble_free &rArr; vTuyaPortFree &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
</UL>

<P><STRONG><a name="[3ab]"></a>tuya_ble_is_word_aligned_tuya</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tuya_ble_utils.o(i.tuya_ble_is_word_aligned_tuya))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sched_init
</UL>

<P><STRONG><a name="[271]"></a>tuya_ble_lock_test_rsp</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tuya_ble_data_handler.o(i.tuya_ble_lock_test_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = tuya_ble_lock_test_rsp &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_rsp
</UL>

<P><STRONG><a name="[220]"></a>tuya_ble_main_tasks_exec</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tuya_ble_main.o(i.tuya_ble_main_tasks_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = tuya_ble_main_tasks_exec &rArr; tuya_sched_execute &rArr; tuya_ble_event_process &rArr; tuya_ble_handle_ble_cmd_evt &rArr; tuya_ble_evt_process &rArr; tuya_ble_handle_ble_factory_test_req &rArr; tuya_ble_app_production_test_process &rArr; app_port_factory_test_process &rArr; factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_sched_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_state_handle
</UL>

<P><STRONG><a name="[14b]"></a>tuya_ble_malloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tuya_ble_mem.o(i.tuya_ble_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTuyaPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_malloc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_ota_response
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_with_time_report
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_dp_data_report
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_receive_data
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ota_req
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_net_config_info_req
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_write_req
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_query_req
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_passthrough_data_req
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ble_factory_test_req
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_klvlist
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_uart_cmd_evt
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
</UL>

<P><STRONG><a name="[37a]"></a>tuya_ble_md5_crypt</STRONG> (Thumb, 52 bytes, Stack size 104 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_md5_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = tuya_ble_md5_crypt &rArr; mbedtls_md5_update &rArr; mbedtls_md5_update_ret &rArr; mbedtls_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_key_generate
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_id_key_generate
</UL>

<P><STRONG><a name="[377]"></a>tuya_ble_message_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tuya_ble_event.o(i.tuya_ble_message_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tuya_ble_message_send &rArr; tuya_ble_sched_event_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sched_event_put
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_custom_event_send
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_send
</UL>

<P><STRONG><a name="[14c]"></a>tuya_ble_nv_erase</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_nv_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tuya_ble_nv_erase &rArr; nrfs_flash_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_erase
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_err_code_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_nv_erase
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_sys_settings
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_auth_settings
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_erase
</UL>

<P><STRONG><a name="[3b0]"></a>tuya_ble_nv_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_nv_init))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_init
</UL>

<P><STRONG><a name="[122]"></a>tuya_ble_nv_read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_nv_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tuya_ble_nv_read &rArr; nrfs_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_read
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_err_code_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_get_crc32_in_flash
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_load_settings
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
</UL>

<P><STRONG><a name="[14d]"></a>tuya_ble_nv_write</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_nv_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tuya_ble_nv_write &rArr; nrfs_flash_write &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_write
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_err_code_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_nv_write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_sys_settings
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_auth_settings
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
</UL>

<P><STRONG><a name="[14e]"></a>tuya_ble_ota_response</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, tuya_ble_api.o(i.tuya_ble_ota_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tuya_ble_ota_response &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_get
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump_empty
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ota_rsp
</UL>

<P><STRONG><a name="[374]"></a>tuya_ble_ota_status_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tuya_ble_data_handler.o(i.tuya_ble_ota_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
</UL>

<P><STRONG><a name="[3a2]"></a>tuya_ble_pair_rand_clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tuya_ble_data_handler.o(i.tuya_ble_pair_rand_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tuya_ble_pair_rand_clear &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_exit_critical
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dev_infor_req
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_connect_change_evt
</UL>

<P><STRONG><a name="[3a3]"></a>tuya_ble_pair_rand_valid_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tuya_ble_data_handler.o(i.tuya_ble_pair_rand_valid_get))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_ota_response_evt
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_net_config_response_evt
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_with_time_reported_evt
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dp_data_reported_evt
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_data_passthrough_evt
</UL>

<P><STRONG><a name="[3a4]"></a>tuya_ble_rand_generator</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_rand_generator))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tuya_ble_rand_generator
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_dev_infor_req
</UL>

<P><STRONG><a name="[3a0]"></a>tuya_ble_reset_ble_sn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tuya_ble_data_handler.o(i.tuya_ble_reset_ble_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tuya_ble_reset_ble_sn &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_exit_critical
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_connect_change_evt
</UL>

<P><STRONG><a name="[38a]"></a>tuya_ble_sched_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tuya_ble_event.o(i.tuya_ble_sched_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tuya_ble_sched_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_is_word_aligned_tuya
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_queue_init
</UL>

<P><STRONG><a name="[12b]"></a>tuya_ble_sdk_init</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, tuya_ble_api.o(i.tuya_ble_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tuya_ble_sdk_init &rArr; tuya_ble_adv_change &rArr; tuya_ble_device_id_encrypt &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_init
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump_empty
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_set_device_version
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_set
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_adv_change
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_monitor_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ble_sdk_init
</UL>

<P><STRONG><a name="[3ad]"></a>tuya_ble_set_device_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tuya_ble_data_handler.o(i.tuya_ble_set_device_version))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sdk_init
</UL>

<P><STRONG><a name="[3ac]"></a>tuya_ble_storage_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tuya_ble_storage.o(i.tuya_ble_storage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tuya_ble_storage_init &rArr; tuya_ble_storage_save_auth_settings &rArr; tuya_ble_nv_write &rArr; nrfs_flash_write &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_load_settings
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_value_is_all_x
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_auth_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sdk_init
</UL>

<P><STRONG><a name="[3b1]"></a>tuya_ble_storage_load_settings</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tuya_ble_storage.o(i.tuya_ble_storage_load_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tuya_ble_storage_load_settings &rArr; tuya_ble_nv_read &rArr; nrfs_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_read
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settings_crc_ok
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_settings_crc_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_init
</UL>

<P><STRONG><a name="[16d]"></a>tuya_ble_storage_save_auth_settings</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tuya_ble_storage.o(i.tuya_ble_storage_save_auth_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tuya_ble_storage_save_auth_settings &rArr; tuya_ble_nv_write &rArr; nrfs_flash_write &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_crc32_compute
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_write_auth_info_handler
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_init
</UL>

<P><STRONG><a name="[16e]"></a>tuya_ble_storage_save_sys_settings</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tuya_ble_storage.o(i.tuya_ble_storage_save_sys_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tuya_ble_storage_save_sys_settings &rArr; tuya_ble_nv_write &rArr; nrfs_flash_write &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_crc32_compute
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_write_auth_info_handler
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_pair_req
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_device_reset_req
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_factory_reset_evt
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_unbond
</UL>

<P><STRONG><a name="[157]"></a>tuya_ble_timer_create</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tuya_ble_timer_create &rArr; nrfs_timer_create &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_create
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_err_code_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_timer_create
</UL>

<P><STRONG><a name="[159]"></a>tuya_ble_timer_start</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tuya_ble_timer_start &rArr; nrfs_timer_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_start
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_err_code_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_timer_start
</UL>

<P><STRONG><a name="[15b]"></a>tuya_ble_timer_stop</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tuya_ble_timer_stop &rArr; nrfs_timer_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_stop
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_err_code_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_timer_stop
</UL>

<P><STRONG><a name="[3a6]"></a>tuya_ble_uart_common_process</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tuya_ble_app_uart_common_handler.o(i.tuya_ble_uart_common_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tuya_ble_uart_common_process
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_uart_cmd_evt
</UL>

<P><STRONG><a name="[3ae]"></a>tuya_ble_uart_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_uart_init))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sdk_init
</UL>

<P><STRONG><a name="[3b4]"></a>tuya_ble_uart_receive_data</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, tuya_ble_api.o(i.tuya_ble_uart_receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tuya_ble_uart_receive_data &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_send
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_data_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
</UL>

<P><STRONG><a name="[15f]"></a>tuya_ble_uart_send_data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tuya_ble_port_nrf52832.o(i.tuya_ble_uart_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tuya_ble_uart_send_data &rArr; nrfs_uart_send &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_uart_send
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_err_code_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_uart_send_data
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_uart_cmd_evt
</UL>

<P><STRONG><a name="[3a8]"></a>tuya_sched_execute</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tuya_ble_event.o(i.tuya_sched_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = tuya_sched_execute &rArr; tuya_ble_event_process &rArr; tuya_ble_handle_ble_cmd_evt &rArr; tuya_ble_evt_process &rArr; tuya_ble_handle_ble_factory_test_req &rArr; tuya_ble_app_production_test_process &rArr; app_port_factory_test_process &rArr; factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_index
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_process
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_main_tasks_exec
</UL>

<P><STRONG><a name="[153]"></a>ty_string_op_hex2hexstr</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, cpt_string_op.o(i.ty_string_op_hex2hexstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ty_string_op_hex2hexstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_string_op_int2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_string_op_hex2hexstr
</UL>

<P><STRONG><a name="[3b6]"></a>ty_string_op_hex2int</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, cpt_string_op.o(i.ty_string_op_hex2int))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_string_op_hexstr2hex
</UL>

<P><STRONG><a name="[155]"></a>ty_string_op_hexstr2hex</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cpt_string_op.o(i.ty_string_op_hexstr2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ty_string_op_hexstr2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_string_op_hex2int
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_string_op_hexstr2hex
</UL>

<P><STRONG><a name="[3b5]"></a>ty_string_op_int2hex</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, cpt_string_op.o(i.ty_string_op_int2hex))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_string_op_hex2hexstr
</UL>

<P><STRONG><a name="[39a]"></a>vTuyaPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tuya_ble_heap.o(i.vTuyaPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTuyaPortFree &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_exit_critical
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_enter_critical
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[23c]"></a>open_meth_creat_handler</STRONG> (Thumb, 550 bytes, Stack size 40 bytes, lock_dp_parser.o(i.open_meth_creat_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = open_meth_creat_handler &rArr; lock_hard_save_in_local_flash &rArr; lock_hard_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_with_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_only_evt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save_in_local_flash
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_get_hardid
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_creat_sub_report_with_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[23d]"></a>open_meth_delete_handler</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, lock_dp_parser.o(i.open_meth_delete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = open_meth_delete_handler &rArr; lock_hard_delete_all_by_memberid &rArr; lock_hardid_load_by_memberid &rArr; lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_finger_delete
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_face_delete
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_doorcard_delete
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete_all_by_memberid
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[23f]"></a>open_meth_freeze_or_unfreeze_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lock_dp_parser.o(i.open_meth_freeze_or_unfreeze_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = open_meth_freeze_or_unfreeze_handler &rArr; lock_hard_freezeorunfreeze &rArr; lock_hard_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_freezeorunfreeze
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[23e]"></a>open_meth_modify_handler</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, lock_dp_parser.o(i.open_meth_modify_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = open_meth_modify_handler &rArr; lock_hard_modify_all_by_memberid &rArr; lock_hardid_load_by_memberid &rArr; lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_modify_in_local_flash
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_modify_all_by_memberid
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[241]"></a>open_meth_sync_handler</STRONG> (Thumb, 492 bytes, Stack size 104 bytes, lock_dp_parser.o(i.open_meth_sync_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = open_meth_sync_handler &rArr; lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_crc16_compute
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_load
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[242]"></a>open_meth_sync_new_handler</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, lock_dp_parser.o(i.open_meth_sync_new_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = open_meth_sync_new_handler &rArr; lock_open_meth_sync_new_report &rArr; lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_meth_sync_new_report
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[243]"></a>open_with_bt_handler</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, lock_dp_parser.o(i.open_with_bt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = open_with_bt_handler &rArr; lock_open_record_report_with_delay &rArr; lock_timer_start &rArr; app_port_timer_start &rArr; tuya_ble_timer_start &rArr; nrfs_timer_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_with_bt
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_record_report_with_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[24a]"></a>open_with_nopwd_remote_handler</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, lock_dp_parser.o(i.open_with_nopwd_remote_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = open_with_nopwd_remote_handler &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_get_timestamp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_with_nopwd_remote
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_record_report_with_delay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[249]"></a>open_with_nopwd_remote_setkey_handler</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lock_dp_parser.o(i.open_with_nopwd_remote_setkey_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = open_with_nopwd_remote_setkey_handler &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[246]"></a>temp_pw_creat_handler</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, lock_dp_parser.o(i.temp_pw_creat_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = temp_pw_creat_handler &rArr; lock_hard_save_in_local_flash &rArr; lock_hard_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_save_in_local_flash
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_get_hardid
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[247]"></a>temp_pw_delete_handler</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lock_dp_parser.o(i.temp_pw_delete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = temp_pw_delete_handler &rArr; lock_hard_delete &rArr; app_port_kv_del &rArr; ef_del_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[248]"></a>temp_pw_modify_handler</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lock_dp_parser.o(i.temp_pw_modify_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = temp_pw_modify_handler &rArr; lock_hard_modify_in_local_flash &rArr; lock_hard_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_modify_in_local_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[240]"></a>user_freeze_or_unfreeze_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lock_dp_parser.o(i.user_freeze_or_unfreeze_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = user_freeze_or_unfreeze_handler &rArr; lock_hard_freezeorunfreeze_all_by_memberid &rArr; lock_hardid_load_by_memberid &rArr; lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_freezeorunfreeze_all_by_memberid
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
</UL>

<P><STRONG><a name="[49]"></a>app_test_outtime_cb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lock_timer.o(i.app_test_outtime_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_test_outtime_cb &rArr; app_common_evt_send_only_evt &rArr; app_port_malloc &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_only_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock_timer.o(i.lock_timer_creat)
</UL>
<P><STRONG><a name="[4a]"></a>app_test_reset_outtime_cb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lock_timer.o(i.app_test_reset_outtime_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_test_reset_outtime_cb &rArr; app_common_evt_send_only_evt &rArr; app_port_malloc &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_only_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock_timer.o(i.lock_timer_creat)
</UL>
<P><STRONG><a name="[46]"></a>bonding_conn_outtime_cb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lock_timer.o(i.bonding_conn_outtime_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bonding_conn_outtime_cb &rArr; app_common_evt_send_only_evt &rArr; app_port_malloc &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_only_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock_timer.o(i.lock_timer_creat)
</UL>
<P><STRONG><a name="[48]"></a>conn_monitor_outtime_cb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lock_timer.o(i.conn_monitor_outtime_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = conn_monitor_outtime_cb &rArr; app_common_evt_send_only_evt &rArr; app_port_malloc &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_only_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock_timer.o(i.lock_timer_creat)
</UL>
<P><STRONG><a name="[44]"></a>conn_param_update_outtime_cb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lock_timer.o(i.conn_param_update_outtime_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = conn_param_update_outtime_cb &rArr; app_common_evt_send_only_evt &rArr; app_port_malloc &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_only_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock_timer.o(i.lock_timer_creat)
</UL>
<P><STRONG><a name="[45]"></a>delay_report_outtime_cb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lock_timer.o(i.delay_report_outtime_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = delay_report_outtime_cb &rArr; app_common_evt_send_only_evt &rArr; app_port_malloc &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_only_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock_timer.o(i.lock_timer_creat)
</UL>
<P><STRONG><a name="[47]"></a>reset_with_disconn_outtime_cb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lock_timer.o(i.reset_with_disconn_outtime_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = reset_with_disconn_outtime_cb &rArr; app_common_evt_send_only_evt &rArr; app_port_malloc &rArr; tuya_ble_malloc &rArr; pvTuyaPortMalloc &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_only_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock_timer.o(i.lock_timer_creat)
</UL>
<P><STRONG><a name="[c0]"></a>TOTP</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, lock_dynamic_pwd.o(i.TOTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = TOTP &rArr; HMAC_SHA1 &rArr; SHA1 &rArr; SHA1Result &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_SHA1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateSHA1
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_dynamic_pwd_token
</UL>

<P><STRONG><a name="[c1]"></a>TruncateSHA1</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lock_dynamic_pwd.o(i.TruncateSHA1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TruncateSHA1
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOTP
</UL>

<P><STRONG><a name="[21e]"></a>get_timer_string</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lock_dynamic_pwd.o(i.get_timer_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = get_timer_string &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_dynamic_pwd_token
</UL>

<P><STRONG><a name="[3c1]"></a>pwd_number_convert_to_integer</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lock_dynamic_pwd.o(i.pwd_number_convert_to_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pwd_number_convert_to_integer
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_dynamic_pwd_token
</UL>

<P><STRONG><a name="[24c]"></a>verify_dynamic_pwd_token</STRONG> (Thumb, 254 bytes, Stack size 88 bytes, lock_dynamic_pwd.o(i.verify_dynamic_pwd_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = verify_dynamic_pwd_token &rArr; TOTP &rArr; HMAC_SHA1 &rArr; SHA1 &rArr; SHA1Result &rArr; SHA1PadMessage &rArr; SHA1ProcessMessageBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_number_convert_to_integer
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_string
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOTP
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dynamic_pwd_verify
</UL>

<P><STRONG><a name="[26f]"></a>is_lock_test_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lock_test.o(i.is_lock_test_mode))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
</UL>

<P><STRONG><a name="[26d]"></a>lock_test_mode_enter</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lock_test.o(i.lock_test_mode_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lock_test_mode_enter &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
</UL>

<P><STRONG><a name="[26e]"></a>lock_test_mode_exit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lock_test.o(i.lock_test_mode_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lock_test_mode_exit &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
</UL>

<P><STRONG><a name="[270]"></a>lock_test_rsp</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lock_test.o(i.lock_test_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = lock_test_rsp &rArr; tuya_ble_lock_test_rsp &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_lock_test_rsp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_test_process
</UL>

<P><STRONG><a name="[3a]"></a>app_common_evt_process</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, app_common.o(i.app_common_evt_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = app_common_evt_process &rArr; delay_report_outtime_cb_handler &rArr; delay_report_outtime_handler &rArr; lock_open_record_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_start
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_finger_start_reg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_finger_cancel_reg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_face_start_reg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_face_cancel_reg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_doorcard_start_reg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_hard_doorcard_cancel_reg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_disconn_handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_with_disconn_outtime_cb_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_stop
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_report_outtime_cb_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_param_update_outtime_cb_handler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_monitor_outtime_cb_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bonding_conn_outtime_cb_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_reset_outtime_cb_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_outtime_cb_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_common.o(i.app_common_evt_send)
</UL>
<P><STRONG><a name="[3b]"></a>app_common_tuya_ble_sdk_callback</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, app_common.o(i.app_common_tuya_ble_sdk_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = app_common_tuya_ble_sdk_callback &rArr; lock_dp_parser_handler &rArr; open_meth_modify_handler &rArr; lock_hard_modify_all_by_memberid &rArr; lock_hardid_load_by_memberid &rArr; lock_hard_load &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_dp_parser_handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_start
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_factory_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_update_timestamp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_stop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_offline_evt_report
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_open_meth_sync_new_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_common.o(i.app_common_init)
</UL>
<P><STRONG><a name="[10e]"></a>app_ota_data_handler</STRONG> (Thumb, 540 bytes, Stack size 48 bytes, app_ota.o(i.app_ota_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = app_ota_data_handler &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_crc16_compute
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_nv_write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_nv_erase
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_crc32_compute
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_rsp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_exit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_reverse_byte
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_handler
</UL>

<P><STRONG><a name="[117]"></a>app_ota_end_handler</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, app_ota.o(i.app_ota_end_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = app_ota_end_handler &rArr; app_port_kv_del &rArr; ef_del_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dfu_settings_write_and_backup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_rsp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_get_crc32_in_flash
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_exit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_del
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_handler
</UL>

<P><STRONG><a name="[11b]"></a>app_ota_enter</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_ota.o(i.app_ota_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = app_ota_enter &rArr; app_port_conn_param_update &rArr; nrfs_conn_param_update &rArr; nrfs_set_conn_param &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ble_conn_evt_ext
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_conn_param_update
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_req_handler
</UL>

<P><STRONG><a name="[110]"></a>app_ota_exit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_ota.o(i.app_ota_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = app_ota_exit &rArr; lock_timer_start &rArr; app_port_timer_start &rArr; tuya_ble_timer_start &rArr; nrfs_timer_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_start
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_dfu_settings_write_and_backup
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_setting_write_complete_cb
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_req_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_offset_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_info_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_end_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_data_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_disconn_handler
</UL>

<P><STRONG><a name="[11e]"></a>app_ota_file_info_handler</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, app_ota.o(i.app_ota_file_info_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = app_ota_file_info_handler &rArr; app_port_kv_get &rArr; ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_get
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_rsp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_exit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_reverse_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_handler
</UL>

<P><STRONG><a name="[121]"></a>app_ota_file_offset_handler</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, app_ota.o(i.app_ota_file_offset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = app_ota_file_offset_handler &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_get
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_rsp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_get_crc32_in_flash
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_exit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_reverse_byte
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_handler
</UL>

<P><STRONG><a name="[119]"></a>app_ota_get_crc32_in_flash</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, app_ota.o(i.app_ota_get_crc32_in_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = app_ota_get_crc32_in_flash &rArr; tuya_ble_nv_read &rArr; nrfs_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_read
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_crc32_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_offset_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_end_handler
</UL>

<P><STRONG><a name="[124]"></a>app_ota_req_handler</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, app_ota.o(i.app_ota_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = app_ota_req_handler &rArr; app_ota_enter &rArr; app_port_conn_param_update &rArr; nrfs_conn_param_update &rArr; nrfs_set_conn_param &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_rsp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_exit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_enter
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_reverse_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_handler
</UL>

<P><STRONG><a name="[10f]"></a>app_ota_rsp</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_ota.o(i.app_ota_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = app_ota_rsp &rArr; app_port_ota_rsp &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_ota_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_req_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_offset_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_file_info_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_end_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_data_handler
</UL>

<P><STRONG><a name="[3c]"></a>app_ota_setting_write_complete_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_ota.o(i.app_ota_setting_write_complete_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = app_ota_setting_write_complete_cb &rArr; app_ota_exit &rArr; lock_timer_start &rArr; app_port_timer_start &rArr; tuya_ble_timer_start &rArr; nrfs_timer_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ota_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ota.o(i.app_ota_end_handler)
</UL>
<P><STRONG><a name="[168]"></a>app_test_gpio_test_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_test.o(i.app_test_gpio_test_handler))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
</UL>

<P><STRONG><a name="[161]"></a>app_test_mode_enter</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_test.o(i.app_test_mode_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = app_test_mode_enter &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
</UL>

<P><STRONG><a name="[163]"></a>app_test_process</STRONG> (Thumb, 414 bytes, Stack size 128 bytes, app_test.o(i.app_test_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = app_test_process &rArr; app_test_write_auth_info_handler &rArr; lock_factory_handler &rArr; lock_flash_erease_all &rArr; lock_settings_delete_and_default &rArr; lock_settings_default &rArr; lock_settings_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timer_start
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_test_mode
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_write_auth_info_handler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_rssi_test_handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_rsp
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_query_info_handler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_mode_enter
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_gpio_test_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_pre_process
</UL>

<P><STRONG><a name="[16a]"></a>app_test_query_info_handler</STRONG> (Thumb, 910 bytes, Stack size 24 bytes, app_test.o(i.app_test_query_info_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = app_test_query_info_handler &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_rsp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_set
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
</UL>

<P><STRONG><a name="[165]"></a>app_test_rsp</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, app_test.o(i.app_test_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = app_test_rsp &rArr; app_port_uart_send_data &rArr; tuya_ble_uart_send_data &rArr; nrfs_uart_send &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_check_sum
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_uart_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_write_auth_info_handler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_query_info_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
</UL>

<P><STRONG><a name="[16c]"></a>app_test_rssi_test_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_test.o(i.app_test_rssi_test_handler))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
</UL>

<P><STRONG><a name="[169]"></a>app_test_write_auth_info_handler</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, app_test.o(i.app_test_write_auth_info_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = app_test_write_auth_info_handler &rArr; lock_factory_handler &rArr; lock_flash_erease_all &rArr; lock_settings_delete_and_default &rArr; lock_settings_default &rArr; lock_settings_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_factory_handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_rsp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_kv_set
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_sys_settings
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_auth_settings
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_string_op_hexstr2hex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_port_set_bt_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
</UL>

<P><STRONG><a name="[164]"></a>is_app_test_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_test.o(i.is_app_test_mode))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_process
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_pre_process
</UL>

<P><STRONG><a name="[193]"></a>auth_settings_crc_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tuya_ble_storage.o(i.auth_settings_crc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = auth_settings_crc_get &rArr; tuya_ble_crc32_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_crc32_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_settings_crc_ok
</UL>

<P><STRONG><a name="[195]"></a>auth_settings_crc_ok</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tuya_ble_storage.o(i.auth_settings_crc_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = auth_settings_crc_ok &rArr; auth_settings_crc_get &rArr; tuya_ble_crc32_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_settings_crc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_load_settings
</UL>

<P><STRONG><a name="[3b2]"></a>buffer_value_is_all_x</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, tuya_ble_storage.o(i.buffer_value_is_all_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = buffer_value_is_all_x
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_init
</UL>

<P><STRONG><a name="[354]"></a>sys_settings_crc_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tuya_ble_storage.o(i.sys_settings_crc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sys_settings_crc_get &rArr; tuya_ble_crc32_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_crc32_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settings_crc_ok
</UL>

<P><STRONG><a name="[355]"></a>sys_settings_crc_ok</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tuya_ble_storage.o(i.sys_settings_crc_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sys_settings_crc_ok &rArr; sys_settings_crc_get &rArr; tuya_ble_crc32_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_settings_crc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_load_settings
</UL>

<P><STRONG><a name="[39b]"></a>nrf_err_code_convert</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, tuya_ble_port_nrf52832.o(i.nrf_err_code_convert))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_read
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gatt_send_data
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_advertising_scan_rsp_data_update
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_advertising_adv_data_update
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_send_data
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_timer_stop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_timer_start
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_timer_create
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_nv_erase
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_disconnect
</UL>

<P><STRONG><a name="[dd]"></a>align_write</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ef_env.o(i.align_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = align_write &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[df]"></a>alloc_env</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ef_env.o(i.alloc_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[39]"></a>alloc_env_cb</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ef_env.o(i.alloc_env_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alloc_env_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.alloc_env)
</UL>
<P><STRONG><a name="[40]"></a>check_and_recovery_env_cb</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ef_env.o(i.check_and_recovery_env_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = check_and_recovery_env_cb &rArr; move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.ef_load_env)
</UL>
<P><STRONG><a name="[3f]"></a>check_and_recovery_gc_cb</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ef_env.o(i.check_and_recovery_gc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = check_and_recovery_gc_cb &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.ef_load_env)
</UL>
<P><STRONG><a name="[3e]"></a>check_sec_hdr_cb</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ef_env.o(i.check_sec_hdr_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = check_sec_hdr_cb &rArr; format_sector &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.ef_load_env)
</UL>
<P><STRONG><a name="[1cb]"></a>continue_ff_addr</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, ef_env.o(i.continue_ff_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = continue_ff_addr &rArr; ef_port_read &rArr; tuya_ble_nv_read &rArr; nrfs_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
</UL>

<P><STRONG><a name="[1cf]"></a>create_env_blob</STRONG> (Thumb, 436 bytes, Stack size 80 bytes, ef_env.o(i.create_env_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_env_hdr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[1db]"></a>del_env</STRONG> (Thumb, 170 bytes, Stack size 104 bytes, ef_env.o(i.del_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_status
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[43]"></a>do_gc</STRONG> (Thumb, 156 bytes, Stack size 88 bytes, ef_env.o(i.do_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = do_gc &rArr; move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.gc_collect)
</UL>
<P><STRONG><a name="[1ec]"></a>env_iterator</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ef_env.o(i.env_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_no_cache
</UL>

<P><STRONG><a name="[1dc]"></a>find_env</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ef_env.o(i.find_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_no_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
</UL>

<P><STRONG><a name="[41]"></a>find_env_cb</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ef_env.o(i.find_env_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = find_env_cb &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.find_env_no_cache)
</UL>
<P><STRONG><a name="[214]"></a>find_env_no_cache</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ef_env.o(i.find_env_no_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>

<P><STRONG><a name="[216]"></a>find_next_env_addr</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, ef_env.o(i.find_next_env_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = find_next_env_addr &rArr; ef_port_read &rArr; tuya_ble_nv_read &rArr; nrfs_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
</UL>

<P><STRONG><a name="[1bf]"></a>format_sector</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, ef_env.o(i.format_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = format_sector &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_erase
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
</UL>

<P><STRONG><a name="[42]"></a>gc_check_cb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ef_env.o(i.gc_check_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_check_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.gc_collect)
</UL>
<P><STRONG><a name="[1be]"></a>gc_collect</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ef_env.o(i.gc_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_gc_cb
</UL>

<P><STRONG><a name="[1eb]"></a>get_env</STRONG> (Thumb, 62 bytes, Stack size 80 bytes, ef_env.o(i.get_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
</UL>

<P><STRONG><a name="[213]"></a>get_env_from_cache</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, ef_env.o(i.get_env_from_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = get_env_from_cache &rArr; ef_port_read &rArr; tuya_ble_nv_read &rArr; nrfs_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>

<P><STRONG><a name="[1e2]"></a>get_next_env_addr</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ef_env.o(i.get_next_env_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = get_next_env_addr &rArr; find_next_env_addr &rArr; ef_port_read &rArr; tuya_ble_nv_read &rArr; nrfs_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_env_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[207]"></a>get_next_sector_addr</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ef_env.o(i.get_next_sector_addr))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>

<P><STRONG><a name="[217]"></a>get_sector_from_cache</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ef_env.o(i.get_sector_from_cache))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_env_addr
</UL>

<P><STRONG><a name="[34a]"></a>get_status</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ef_env.o(i.get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_status
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
</UL>

<P><STRONG><a name="[1bc]"></a>move_env</STRONG> (Thumb, 284 bytes, Stack size 168 bytes, ef_env.o(i.move_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_no_cache
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
</UL>

<P><STRONG><a name="[1d0]"></a>new_env</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ef_env.o(i.new_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env_by_kv
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[299]"></a>new_env_by_kv</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ef_env.o(i.new_env_by_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = new_env_by_kv &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[1e1]"></a>read_env</STRONG> (Thumb, 288 bytes, Stack size 112 bytes, ef_env.o(i.read_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[206]"></a>read_sector_meta_data</STRONG> (Thumb, 334 bytes, Stack size 120 bytes, ef_env.o(i.read_sector_meta_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continue_ff_addr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>

<P><STRONG><a name="[1dd]"></a>read_status</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ef_env.o(i.read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = read_status &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
</UL>

<P><STRONG><a name="[e0]"></a>sector_iterator</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ef_env.o(i.sector_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
</UL>

<P><STRONG><a name="[38]"></a>sector_statistics_cb</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ef_env.o(i.sector_statistics_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sector_statistics_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.alloc_env)
</UL>
<P><STRONG><a name="[1ef]"></a>set_env</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ef_env.o(i.set_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env_by_kv
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
</UL>

<P><STRONG><a name="[218]"></a>set_status</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ef_env.o(i.set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_status
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[1d5]"></a>update_env_cache</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, ef_env.o(i.update_env_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = update_env_cache &rArr; ef_calc_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[1d1]"></a>update_sec_status</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ef_env.o(i.update_sec_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = update_sec_status &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[1d4]"></a>update_sector_cache</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, ef_env.o(i.update_sector_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[1d3]"></a>write_env_hdr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ef_env.o(i.write_env_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = write_env_hdr &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[1bd]"></a>write_status</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ef_env.o(i.write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_env_hdr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
</UL>

<P><STRONG><a name="[1fc]"></a>get_fmt_enabled</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, elog.o(i.get_fmt_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = get_fmt_enabled &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[51]"></a>scan_evt_handler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, nrfs_scan_adv.o(i.scan_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = scan_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfs_scan_adv.o(i.nrfs_scan_init)
</UL>
<P><STRONG><a name="[50]"></a>gatt_evt_handler</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, nrfs_ble.o(i.gatt_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gatt_evt_handler &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfs_ble.o(i.nrfs_gatt_init)
</UL>
<P><STRONG><a name="[70]"></a>nrfs_ble_evt_handler</STRONG> (Thumb, 608 bytes, Stack size 72 bytes, nrfs_ble.o(i.nrfs_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrfs_ble_evt_handler &rArr; nrfs_adv_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_common_evt_send_only_evt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_disconnected_handler
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connected_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_state_update
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_adv_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfs_ble.o(sdh_ble_observers3)
</UL>
<P><STRONG><a name="[31c]"></a>nrfs_set_defConn_param</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, nrfs_ble.o(i.nrfs_set_defConn_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrfs_set_defConn_param &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_gap_params_init
</UL>

<P><STRONG><a name="[52]"></a>nus_data_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfs_svc.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nus_data_handler &rArr; tuya_ble_gatt_receive_data &rArr; tuya_ble_event_send &rArr; tuya_ble_message_send &rArr; tuya_ble_sched_event_put
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gatt_receive_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfs_svc.o(i.nrfs_svc_init)
</UL>
<P><STRONG><a name="[53]"></a>uart_event_handle</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nrfs_uart.o(i.uart_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = uart_event_handle &rArr; app_uart_get &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_receive_data
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfs_uart.o(i.nrfs_uart_init)
</UL>
<P><STRONG><a name="[321]"></a>acquire_timer</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nrfs_timer.o(i.acquire_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = acquire_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_create
</UL>

<P><STRONG><a name="[324]"></a>find_timer_ms</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrfs_timer.o(i.find_timer_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_timer_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_timer_start
</UL>

<P><STRONG><a name="[315]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfs_timer.o(i.nrfx_coredep_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_delay_ms
</UL>

<P><STRONG><a name="[34c]"></a>rtc2_config</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrfs_timer.o(i.rtc2_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rtc2_config &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_tick_enable
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc2_start
</UL>

<P><STRONG><a name="[54]"></a>rtc2_handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrfs_timer.o(i.rtc2_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrfs_timer.o(i.rtc2_config)
</UL>
<P><STRONG><a name="[31d]"></a>rtc2_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrfs_timer.o(i.rtc2_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rtc2_start &rArr; rtc2_config &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_local_timer_start
</UL>

<P><STRONG><a name="[2]"></a>fstorage_evt_handler</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, nrfs_flash.o(i.fstorage_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fstorage_evt_handler &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfs_flash.o(fs_data)
</UL>
<P><STRONG><a name="[21c]"></a>get_current_flash_op_index</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrfs_flash.o(i.get_current_flash_op_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_current_flash_op_index &rArr; nrf_atomic_u32_store
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_store
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_erase
</UL>

<P><STRONG><a name="[319]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrfs_flash.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_write
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_flash_erase
</UL>

<P><STRONG><a name="[21f]"></a>idle_state_handle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.idle_state_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = idle_state_handle &rArr; tuya_ble_main_tasks_exec &rArr; tuya_sched_execute &rArr; tuya_ble_event_process &rArr; tuya_ble_handle_ble_cmd_evt &rArr; tuya_ble_evt_process &rArr; tuya_ble_handle_ble_factory_test_req &rArr; tuya_ble_app_production_test_process &rArr; app_port_factory_test_process &rArr; factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_main_tasks_exec
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[272]"></a>log_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(i.log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = log_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[279]"></a>power_management_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i.power_management_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = power_management_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>advertising_buttons_configure</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[6d]"></a>ble_evt_handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, bsp_btn_ble.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_evt_handler &rArr; connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_btn_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[1a3]"></a>connection_buttons_configure</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.connection_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[6e]"></a>ble_evt_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_evt_handler &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[1c9]"></a>conn_params_negotiation</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[340]"></a>instance_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_conn_params.o(i.instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[341]"></a>is_conn_params_ok</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[1a7]"></a>on_conn_params_update</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1a4]"></a>on_connect</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1a5]"></a>on_disconnect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1a6]"></a>on_write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1ca]"></a>send_error_evt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(i.send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[6a]"></a>ble_evt_handler</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ble_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[1a9]"></a>record_activate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_activate &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[34b]"></a>record_invalidate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = record_invalidate &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[1a8]"></a>record_purge_disconnected</STRONG> (Thumb, 66 bytes, Stack size 104 bytes, ble_conn_state.o(i.record_purge_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = record_purge_disconnected &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1ab]"></a>record_set_disconnected</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_set_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_set_disconnected &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1ba]"></a>set_security_req</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, ble_srv_common.o(i.set_security_req))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
</UL>

<P><STRONG><a name="[1b4]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>

<P><STRONG><a name="[1d8]"></a>data_length_update</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.data_length_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>

<P><STRONG><a name="[2af]"></a>link_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
</UL>

<P><STRONG><a name="[2b0]"></a>on_connected_evt</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = on_connected_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[2b4]"></a>on_data_length_update_evt</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, nrf_ble_gatt.o(i.on_data_length_update_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_data_length_update_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[2b5]"></a>on_data_length_update_request_evt</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_data_length_update_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = on_data_length_update_request_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[2b1]"></a>on_disconnected_evt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.on_disconnected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_disconnected_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[2b3]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = on_exchange_mtu_request_evt &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[2b2]"></a>on_exchange_mtu_rsp_evt</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_rsp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_exchange_mtu_rsp_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[d9]"></a>adv_uuid_compare</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nrf_ble_scan.o(i.adv_uuid_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = adv_uuid_compare &rArr; ble_advdata_uuid_find &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_uuid_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_adv_report
</UL>

<P><STRONG><a name="[2b6]"></a>nrf_ble_scan_connect_with_target</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, nrf_ble_scan.o(i.nrf_ble_scan_connect_with_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_ble_scan_connect_with_target
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_adv_report
</UL>

<P><STRONG><a name="[2ba]"></a>nrf_ble_scan_default_conn_param_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_ble_scan.o(i.nrf_ble_scan_default_conn_param_set))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_init
</UL>

<P><STRONG><a name="[2b9]"></a>nrf_ble_scan_default_param_set</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_ble_scan.o(i.nrf_ble_scan_default_param_set))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_params_set
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_init
</UL>

<P><STRONG><a name="[2bb]"></a>nrf_ble_scan_on_adv_report</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, nrf_ble_scan.o(i.nrf_ble_scan_on_adv_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = nrf_ble_scan_on_adv_report &rArr; adv_uuid_compare &rArr; ble_advdata_uuid_find &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_whitelist_used
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_connect_with_target
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_uuid_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_ble_evt
</UL>

<P><STRONG><a name="[2bf]"></a>nrf_ble_scan_on_connected_evt</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, nrf_ble_scan.o(i.nrf_ble_scan_on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_ble_scan_on_connected_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_ble_evt
</UL>

<P><STRONG><a name="[2be]"></a>nrf_ble_scan_on_req_report</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, nrf_ble_scan.o(i.nrf_ble_scan_on_req_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_ble_scan_on_req_report
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_ble_evt
</UL>

<P><STRONG><a name="[2bd]"></a>nrf_ble_scan_on_timeout</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, nrf_ble_scan.o(i.nrf_ble_scan_on_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_ble_scan_on_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_scan_on_ble_evt
</UL>

<P><STRONG><a name="[1b0]"></a>on_connect</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, ble_nus.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[1b2]"></a>on_hvx_tx_complete</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, ble_nus.o(i.on_hvx_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_hvx_tx_complete &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[1b1]"></a>on_write</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, ble_nus.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_write &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[1c0]"></a>clock_clk_started_notify</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[4b]"></a>clock_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[1c1]"></a>item_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[233]"></a>lfclk_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfclk_stop &rArr; nrfx_clock_lfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[76]"></a>sd_state_evt_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[72]"></a>soc_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[4d]"></a>uart_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.uart_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[4c]"></a>uarte_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.uarte_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uarte_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[a5]"></a>nrf_clock_event_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>nrf_clock_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[329]"></a>nrf_clock_lf_is_running</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_lf_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
</UL>

<P><STRONG><a name="[328]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
</UL>

<P><STRONG><a name="[32a]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>

<P><STRONG><a name="[327]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, nrfx_clock.o(i.nrfx_power_clock_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
</UL>

<P><STRONG><a name="[99]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>nrf_bitmask_bit_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[2e7]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[97]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[32c]"></a>prs_box_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[187]"></a>apply_config</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrfx_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_txrx_pins_set
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_hwfc_pins_set
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[226]"></a>interrupts_enable</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, nrfx_uart.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = interrupts_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[2e5]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrfx_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[18a]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[189]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[188]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[3b9]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[335]"></a>nrf_uart_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>

<P><STRONG><a name="[227]"></a>nrf_uart_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[18c]"></a>nrf_uart_hwfc_pins_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[333]"></a>nrf_uart_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[228]"></a>nrf_uart_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[3b8]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[337]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>

<P><STRONG><a name="[18b]"></a>nrf_uart_txrx_pins_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[229]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[336]"></a>rx_byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrfx_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3ba]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nrfx_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[334]"></a>rx_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrfx_uart.o(i.rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[339]"></a>tx_blocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[338]"></a>tx_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>

<P><STRONG><a name="[3bb]"></a>tx_done_event</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrfx_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[332]"></a>uart_irq_handler</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, nrfx_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_0_irq_handler
</UL>

<P><STRONG><a name="[18d]"></a>apply_config</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrfx_uarte.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_txrx_pins_set
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_hwfc_pins_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[22a]"></a>interrupts_enable</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, nrfx_uarte.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = interrupts_enable &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[2e6]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrfx_uarte.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[190]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[18f]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[18e]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[3bc]"></a>nrf_uarte_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[33e]"></a>nrf_uarte_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[22b]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[192]"></a>nrf_uarte_hwfc_pins_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[33c]"></a>nrf_uarte_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[22c]"></a>nrf_uarte_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[3bd]"></a>nrf_uarte_rx_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_rx_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[3be]"></a>nrf_uarte_shorts_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_shorts_disable))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[33d]"></a>nrf_uarte_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[191]"></a>nrf_uarte_txrx_pins_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[22d]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[33b]"></a>nrfx_is_in_ram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[3bf]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nrfx_uarte.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[3c0]"></a>tx_done_event</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrfx_uarte.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[33a]"></a>uarte_irq_handler</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, nrfx_uarte.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_shorts_disable
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_rx_amount_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_0_irq_handler
</UL>

<P><STRONG><a name="[a9]"></a>irq_handler</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nrfx_rtc.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_is_enabled
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_pending
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC2_IRQHandler
</UL>

<P><STRONG><a name="[232]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_rtc.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_tick_enable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[230]"></a>nrf_rtc_event_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_event_disable))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[330]"></a>nrf_rtc_event_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_event_enable))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_tick_enable
</UL>

<P><STRONG><a name="[22f]"></a>nrf_rtc_event_pending</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_event_pending))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[231]"></a>nrf_rtc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[331]"></a>nrf_rtc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_tick_enable
</UL>

<P><STRONG><a name="[22e]"></a>nrf_rtc_int_is_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_int_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[32e]"></a>nrf_rtc_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(i.nrf_rtc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_enable
</UL>

<P><STRONG><a name="[2fc]"></a>wait_for_flash_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_nvmc.o(i.wait_for_flash_ready))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_words
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_page_erase
</UL>

<P><STRONG><a name="[10b]"></a>fifo_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[10a]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[212]"></a>fifo_peek</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_fifo.o(i.fifo_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>

<P><STRONG><a name="[10d]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[171]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[173]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[359]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[172]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[1c2]"></a>compare_reg_update</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_start &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[356]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[357]"></a>expired_timers_handler</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[235]"></a>list_insertions_handler</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[1c6]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_timer.o(i.nrfx_coredep_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[1c5]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[175]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[174]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[1c4]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc1_start &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[170]"></a>rtc1_stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[1c3]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[35c]"></a>timeout_handler_exec</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeout_handler_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[b2]"></a>timer_list_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[358]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[237]"></a>timer_list_insert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[236]"></a>timer_list_remove</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[177]"></a>timer_start_op_schedule</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[179]"></a>timer_stop_op_schedule</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[a8]"></a>timer_timeouts_check</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[1c7]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[35a]"></a>user_op_alloc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[35b]"></a>user_op_enque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[3b7]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[17b]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_uart_fifo.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_uart_rx &rArr; nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[182]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_uart_fifo.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[3d]"></a>uart_event_handler</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[186]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>

<P><STRONG><a name="[184]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_util_platform.o(i.sd_nvic_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[2ad]"></a>nrf_balloc_block2idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_block2idx))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>

<P><STRONG><a name="[2ab]"></a>nrf_balloc_idx2block</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_idx2block))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>

<P><STRONG><a name="[1b8]"></a>buffer_add</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[224]"></a>int_print</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[2da]"></a>string_print</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nrf_fprintf_format.o(i.string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = string_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[225]"></a>unsigned_print</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[296]"></a>memobj_op</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[30c]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>

<P><STRONG><a name="[2df]"></a>addr_is_aligned32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_aligned32))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_read
</UL>

<P><STRONG><a name="[2dc]"></a>addr_is_page_aligned</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_page_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[2dd]"></a>addr_is_within_bounds</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_fstorage.o(i.addr_is_within_bounds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addr_is_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_read
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[5b]"></a>erase</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = erase &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[349]"></a>erase_execute</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.erase_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[20f]"></a>event_send</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, nrf_fstorage_sd.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[57]"></a>init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init &rArr; nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>is_busy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[2e2]"></a>on_operation_failure</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.on_operation_failure))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[2e1]"></a>on_operation_success</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.on_operation_success))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[2e3]"></a>queue_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_free &rArr; nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[347]"></a>queue_load_next</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_load_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_load_next &rArr; nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2e0]"></a>queue_process</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_load_next
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sdh_state_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[20a]"></a>queue_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[59]"></a>read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>rmap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.rmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>uninit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uninit &rArr; nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>wmap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.wmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>write</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = write &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[348]"></a>write_execute</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[63]"></a>erase</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nrf_fstorage_nvmc.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = erase &rArr; event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_page_erase
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[20e]"></a>event_send</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, nrf_fstorage_nvmc.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[5f]"></a>init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_fstorage_nvmc.o(i.init))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>is_busy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage_nvmc.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_fstorage_nvmc.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>rmap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fstorage_nvmc.o(i.rmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>uninit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_fstorage_nvmc.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uninit &rArr; nrf_atomic_flag_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>wmap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fstorage_nvmc.o(i.wmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>write</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, nrf_fstorage_nvmc.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write &rArr; event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_words
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>serial_tx</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[2e9]"></a>backend_id_assign</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.backend_id_assign))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
</UL>

<P><STRONG><a name="[1b5]"></a>buf_prealloc</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[1e3]"></a>dropped_sat16_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
</UL>

<P><STRONG><a name="[276]"></a>invalid_packets_omit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[1b7]"></a>log_skip</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[297]"></a>module_idx_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>

<P><STRONG><a name="[353]"></a>std_header_set</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_header_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std_header_set &rArr; dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[2f4]"></a>std_n</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>

<P><STRONG><a name="[2f6]"></a>postfix_process</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[2f5]"></a>prefix_process</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_print
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[343]"></a>timestamp_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_str_formatter.o(i.timestamp_print))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[ab]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[ad]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[af]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[ae]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[34f]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[30b]"></a>nrf_section_iter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_section_iter_get))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[34e]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, nrf_sdh.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
</UL>

<P><STRONG><a name="[306]"></a>sdh_request_observer_notify</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[307]"></a>sdh_state_observer_notify</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[308]"></a>softdevice_evt_irq_disable</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_sdh.o(i.softdevice_evt_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = softdevice_evt_irq_disable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[30a]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_sdh.o(i.softdevices_evt_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[74]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[303]"></a>ram_end_address_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.ram_end_address_get))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
</UL>

<P><STRONG><a name="[75]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[351]"></a>boot_validation_crc_ok</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_dfu_settings.o(i.boot_validation_crc_ok))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_backup_crc_ok
</UL>

<P><STRONG><a name="[1cd]"></a>crc_ok</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_dfu_settings.o(i.crc_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = crc_ok &rArr; settings_crc_get &rArr; crc32_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_crc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_crc_ok
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_backup_crc_ok
</UL>

<P><STRONG><a name="[2c8]"></a>settings_backup_crc_ok</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_dfu_settings.o(i.settings_backup_crc_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = settings_backup_crc_ok &rArr; crc_ok &rArr; settings_crc_get &rArr; crc32_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_ok
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_validation_crc_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_init
</UL>

<P><STRONG><a name="[1ce]"></a>settings_crc_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_dfu_settings.o(i.settings_crc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = settings_crc_get &rArr; crc32_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_ok
</UL>

<P><STRONG><a name="[2c7]"></a>settings_crc_ok</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_dfu_settings.o(i.settings_crc_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = settings_crc_ok &rArr; crc_ok &rArr; settings_crc_get &rArr; crc32_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_init
</UL>

<P><STRONG><a name="[2c9]"></a>settings_forbidden_parts_copy_from_backup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_dfu_settings.o(i.settings_forbidden_parts_copy_from_backup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = settings_forbidden_parts_copy_from_backup
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_init
</UL>

<P><STRONG><a name="[2cc]"></a>settings_write</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nrf_dfu_settings.o(i.settings_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = settings_write &rArr; nrf_dfu_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr;  nrf_log_frontend_dequeue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_flash_store
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_backup
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_settings_write
</UL>

<P><STRONG><a name="[bc]"></a>errata_108</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_108))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b4]"></a>errata_12</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_12))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[bd]"></a>errata_136</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b5]"></a>errata_16</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_16))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[be]"></a>errata_182</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_182))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b6]"></a>errata_31</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_31))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b7]"></a>errata_32</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_32))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b8]"></a>errata_36</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b9]"></a>errata_37</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_37))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ba]"></a>errata_57</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_57))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[bb]"></a>errata_66</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3af]"></a>tuya_ble_connect_monitor_timer_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tuya_ble_api.o(i.tuya_ble_connect_monitor_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sdk_init
</UL>

<P><STRONG><a name="[3b3]"></a>tuya_ble_uart_data_unpack</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, tuya_ble_api.o(i.tuya_ble_uart_data_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tuya_ble_uart_data_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_receive_data
</UL>

<P><STRONG><a name="[19a]"></a>ble_cmd_data_crc_check</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tuya_ble_data_handler.o(i.ble_cmd_data_crc_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_cmd_data_crc_check &rArr; tuya_ble_crc16_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_crc16_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
</UL>

<P><STRONG><a name="[19f]"></a>ble_data_unpack</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tuya_ble_data_handler.o(i.ble_data_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_data_unpack &rArr; trsmitr_recv_pkg_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trsmitr_recv_pkg_decode
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trsmitr_subpkg_len
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trsmitr_subpkg
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
</UL>

<P><STRONG><a name="[3a7]"></a>buffer_value_is_all_x</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, tuya_ble_data_handler.o(i.buffer_value_is_all_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = buffer_value_is_all_x
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_handle_unix_time_char_ms_resp
</UL>

<P><STRONG><a name="[219]"></a>get_ble_send_sn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tuya_ble_data_handler.o(i.get_ble_send_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_ble_send_sn &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_exit_critical
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>

<P><STRONG><a name="[350]"></a>set_ble_receive_sn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tuya_ble_data_handler.o(i.set_ble_receive_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_ble_receive_sn &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_exit_critical
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commonData_rx_proc
</UL>

<P><STRONG><a name="[395]"></a>tuya_ble_handle_anomaly_unbond_req</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_anomaly_unbond_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = tuya_ble_handle_anomaly_unbond_req &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_get
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_unbond
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[399]"></a>tuya_ble_handle_ble_factory_test_req</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_ble_factory_test_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = tuya_ble_handle_ble_factory_test_req &rArr; tuya_ble_app_production_test_process &rArr; app_port_factory_test_process &rArr; factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_app_production_test_process
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[391]"></a>tuya_ble_handle_ble_passthrough_data_req</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_ble_passthrough_data_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tuya_ble_handle_ble_passthrough_data_req &rArr; tuya_ble_cb_event_send &rArr; tuya_ble_inter_event_response &rArr; tuya_ble_free &rArr; vTuyaPortFree &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[38e]"></a>tuya_ble_handle_dev_infor_req</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_dev_infor_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = tuya_ble_handle_dev_infor_req &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_rand_generator
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_pair_rand_clear
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[396]"></a>tuya_ble_handle_device_reset_req</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_device_reset_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = tuya_ble_handle_device_reset_req &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_sys_settings
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_unbond
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[397]"></a>tuya_ble_handle_dp_data_report_res</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_dp_data_report_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tuya_ble_handle_dp_data_report_res &rArr; tuya_ble_cb_event_send &rArr; tuya_ble_inter_event_response &rArr; tuya_ble_free &rArr; vTuyaPortFree &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[398]"></a>tuya_ble_handle_dp_data_with_time_report_res</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_dp_data_with_time_report_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tuya_ble_handle_dp_data_with_time_report_res &rArr; tuya_ble_cb_event_send &rArr; tuya_ble_inter_event_response &rArr; tuya_ble_free &rArr; vTuyaPortFree &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[38d]"></a>tuya_ble_handle_dp_query_req</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_dp_query_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = tuya_ble_handle_dp_query_req &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[38c]"></a>tuya_ble_handle_dp_write_req</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_dp_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = tuya_ble_handle_dp_write_req &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump_empty
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_klv_list
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_2_klvlist
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[390]"></a>tuya_ble_handle_net_config_info_req</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_net_config_info_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = tuya_ble_handle_net_config_info_req &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[392]"></a>tuya_ble_handle_ota_req</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_ota_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tuya_ble_handle_ota_req &rArr; tuya_ble_cb_event_send &rArr; tuya_ble_inter_event_response &rArr; tuya_ble_free &rArr; vTuyaPortFree &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[38f]"></a>tuya_ble_handle_pair_req</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_pair_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = tuya_ble_handle_pair_req &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_get
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_gap_disconnect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_sys_settings
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_set
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_adv_change
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_monitor_timer_stop
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[394]"></a>tuya_ble_handle_unbond_req</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_unbond_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = tuya_ble_handle_unbond_req &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_get
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_unbond
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[393]"></a>tuya_ble_handle_unix_time_char_ms_resp</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, tuya_ble_data_handler.o(i.tuya_ble_handle_unix_time_char_ms_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tuya_ble_handle_unix_time_char_ms_resp &rArr; atoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoll
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_value_is_all_x
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>

<P><STRONG><a name="[387]"></a>tuya_ble_handle_ble_cmd_evt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tuya_ble_main.o(i.tuya_ble_handle_ble_cmd_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = tuya_ble_handle_ble_cmd_evt &rArr; tuya_ble_evt_process &rArr; tuya_ble_handle_ble_factory_test_req &rArr; tuya_ble_app_production_test_process &rArr; app_port_factory_test_process &rArr; factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_evt_process
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_process
</UL>

<P><STRONG><a name="[389]"></a>tuya_ble_handle_connect_change_evt</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tuya_ble_main.o(i.tuya_ble_handle_connect_change_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tuya_ble_handle_connect_change_evt &rArr; tuya_ble_cb_event_send &rArr; tuya_ble_inter_event_response &rArr; tuya_ble_free &rArr; vTuyaPortFree &rArr; tuya_ble_device_enter_critical &rArr; nrfs_enter_critical &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_get
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_status_set
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_connect_monitor_timer_start
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_cb_event_send
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_reset_ble_sn
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_pair_rand_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_process
</UL>

<P><STRONG><a name="[384]"></a>tuya_ble_handle_data_passthrough_evt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tuya_ble_main.o(i.tuya_ble_handle_data_passthrough_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = tuya_ble_handle_data_passthrough_evt &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_pair_rand_valid_get
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_process
</UL>

<P><STRONG><a name="[380]"></a>tuya_ble_handle_device_info_update_evt</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tuya_ble_main.o(i.tuya_ble_handle_device_info_update_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tuya_ble_handle_device_info_update_evt &rArr; tuya_ble_adv_change &rArr; tuya_ble_device_id_encrypt &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_adv_change
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_process
</UL>

<P><STRONG><a name="[381]"></a>tuya_ble_handle_dp_data_reported_evt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tuya_ble_main.o(i.tuya_ble_handle_dp_data_reported_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = tuya_ble_handle_dp_data_reported_evt &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_pair_rand_valid_get
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_process
</UL>

<P><STRONG><a name="[385]"></a>tuya_ble_handle_dp_data_with_time_reported_evt</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tuya_ble_main.o(i.tuya_ble_handle_dp_data_with_time_reported_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = tuya_ble_handle_dp_data_with_time_reported_evt &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_pair_rand_valid_get
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_process
</UL>

<P><STRONG><a name="[382]"></a>tuya_ble_handle_factory_reset_evt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tuya_ble_main.o(i.tuya_ble_handle_factory_reset_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tuya_ble_handle_factory_reset_evt &rArr; tuya_ble_adv_change &rArr; tuya_ble_device_id_encrypt &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_storage_save_sys_settings
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_adv_change
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_process
</UL>

<P><STRONG><a name="[388]"></a>tuya_ble_handle_net_config_response_evt</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tuya_ble_main.o(i.tuya_ble_handle_net_config_response_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = tuya_ble_handle_net_config_response_evt &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_pair_rand_valid_get
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_process
</UL>

<P><STRONG><a name="[383]"></a>tuya_ble_handle_ota_response_evt</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tuya_ble_main.o(i.tuya_ble_handle_ota_response_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = tuya_ble_handle_ota_response_evt &rArr; tuya_ble_commData_send &rArr; tuya_ble_encryption &rArr; tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_pair_rand_valid_get
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_commData_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_process
</UL>

<P><STRONG><a name="[386]"></a>tuya_ble_handle_uart_cmd_evt</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tuya_ble_main.o(i.tuya_ble_handle_uart_cmd_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = tuya_ble_handle_uart_cmd_evt &rArr; tuya_ble_app_production_test_process &rArr; app_port_factory_test_process &rArr; factory_test_process &rArr; lock_hard_uart_simulate &rArr; lock_open_record_combine_report &rArr; lock_evt_save &rArr; lock_evtid_save &rArr; app_port_kv_set &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; ef_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_app_production_test_process
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_send_data
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_free
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfs_log_hexdump_empty
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_uart_common_process
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_event_process
</UL>

<P><STRONG><a name="[360]"></a>tuya_ble_Add_Pkcs</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, tuya_ble_cryption_api.o(i.tuya_ble_Add_Pkcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tuya_ble_Add_Pkcs
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_encrypt_old_with_key
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_encryption
</UL>

<P><STRONG><a name="[379]"></a>tuya_ble_device_id_key_generate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tuya_ble_cryption_api.o(i.tuya_ble_device_id_key_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = tuya_ble_device_id_key_generate &rArr; tuya_ble_md5_crypt &rArr; mbedtls_md5_update &rArr; mbedtls_md5_update_ret &rArr; mbedtls_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_md5_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_device_id_encrypt
</UL>

<P><STRONG><a name="[39e]"></a>tuya_ble_generate_key1</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, tuya_ble_cryption_api.o(i.tuya_ble_generate_key1))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_aes128_cbc_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_key_generate
</UL>

<P><STRONG><a name="[378]"></a>tuya_ble_key_generate</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, tuya_ble_cryption_api.o(i.tuya_ble_key_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tuya_ble_key_generate &rArr; tuya_ble_generate_key1 &rArr; tuya_ble_aes128_cbc_encrypt &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_md5_crypt
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_generate_key1
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_encryption
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_decryption
</UL>

<P><STRONG><a name="[3aa]"></a>next_index</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tuya_ble_event.o(i.next_index))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_sched_event_put
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_sched_execute
</UL>

<P><STRONG><a name="[3a9]"></a>tuya_ble_sched_event_put</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tuya_ble_event.o(i.tuya_ble_sched_event_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tuya_ble_sched_event_put
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_index
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuya_ble_message_send
</UL>

<P><STRONG><a name="[345]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, tuya_ble_heap.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTuyaPortMalloc
</UL>

<P><STRONG><a name="[346]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, tuya_ble_heap.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTuyaPortFree
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTuyaPortMalloc
</UL>

<P><STRONG><a name="[35f]"></a>get_frame_seq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tuya_ble_mutli_tsf_protocol.o(i.get_frame_seq))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trsmitr_send_pkg_encode
</UL>

<P><STRONG><a name="[d5]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c5]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[d7]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d6]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[36]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[37]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
